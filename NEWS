** This file is hopelessly out of date! **

Not yet implemented in 2.0:

. --where and --search

New in RPM 2.0 (or previously undocumented):

*** Install

--replacepkgs	- will install a package even if it's already in the database
--replacefiles  - will install a package even if the files it contains conflict
		  with others
--force		- same as "--replacepkgs --replacefiles"

*** Uninstall

*** Upgrade

*** Query

*** Verify

Verification output is much more readable.  Notes config files, etc.

*** PGP Signatures

RPM now supports optional PGP signatures embedded in RPM packages.
Only 1024 bit keys are supported, and the signature "covers" the
header and archive sections of the package.  The "lead", which 
makes up the first 96 bytes of every package is not covered by
the signature.  This should not be cause for alarm as the lead
is only used by file(1), and by RPM to determine the package type
(either source or binary) and architecture.

The rpm(1) man page has some details on using PGP signatures.

*** Spec file (RPM building)

. Summary: ...
  A one (short) line description of the package.  This field
  takes over what Description used to do, but is limited to
  a single line.  For an interim period, if the Summary is
  not defined the description will be used instead.

. Description: ...
  An optional mulit-line description of the package.

. Packager: ...
  Name and email address of the person who "maintains" the RPM

. URL: ...
  A place to put a URL for more info on the package (http://...)

. Serial: ...
  This number should be monotonically increasing with each new
  release of the package.  If present, it will be used by RPM
  to define an ordering.  If not present RPM tries to determine
  the ordering from the Version field.

. %package -n foo
  Builds "subpackage" with name foo-Version-Release

. %ifarch <arch>+
  %ifnarch <arch>+
  %else
  %endif
  also: %ifos <os>+
        %ifnos <os>+

. Exclude: <arch>+
  Exclusive: <arch>+

. %clean
  Executed after all packaging is finished

. %changelog

. %verify can be used to control which aspects of the file are verified

. %attr can be used to specify mode, user and group of files

. %files -f <file>
  Takes file list from <file>, which is relative to the build dir.
