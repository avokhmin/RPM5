##
##  devtool.conf -- Development Tool Configuration for RPM 5
##

%common
    MODULE_NAMES="db zlib file"
    MODULE_TAG_DB=""
    MODULE_TAG_LUA=""
    MODULE_TAG_ZLIB=""
    MODULE_TAG_FILE=""

%checkout
    for name in $MODULE_NAMES "$@"; do
        release=MODULE_TAG_`echo ${name} | tr [a-z] [A-Z]`
        release=`eval echo \\$${release}`
        if [ ".${release}" = . ]; then
            if [ -d ${DEVTOOL_SRCDIR}/${name}/CVS ]; then
                echo "===> ${name} (cvs up HEAD)"
                ( cd ${DEVTOOL_SRCDIR}/${name} && cvs up -A )
            else
                echo "===> ${name} (cvs co HEAD)"
                ( cd ${DEVTOOL_SRCDIR} && cvs co -A -d ${name} ${name} )
            fi
        else
            if [ -d ${DEVTOOL_SRCDIR}/${name}/CVS ]; then
                echo "===> ${name} (cvs up ${release})"
                ( cd ${DEVTOOL_SRCDIR}/${name} && cvs up -r${release} )
            else
                echo "===> ${name} (cvs co ${release})"
                ( cd ${DEVTOOL_SRCDIR} && cvs co -r${release} -d ${name} ${name} )
            fi
        fi
        echo "<=== ${name}"
    done

%autogen
    ( cd ${DEVTOOL_SRCDIR} && sh autogen.sh )

%configure
    ${DEVTOOL_SRCDIR}/configure \
        --verbose \
        "$@"

%make
    #   intentionally just a pass-through target
    #   (important for use with devtool.bashrc)
    make "$@" 

%prepare
    %checkout
    %autogen
    %configure "$@"

%jbj
    %checkout
    %autogen
    %configure \
        --verbose \
        --prefix=/usr \
        --with-db=internal \
        --with-zlib=internal \
        --with-file=internal \
        --with-sqlite=external \
        --with-beecrypt=external \
        --with-neon=external \
        --with-bzip2=external \
        --with-popt=external \
        --with-libelf \
        --with-selinux \
        --enable-build-warnings \
        --enable-build-pic \
        --enable-build-pie \
        --enable-maintainer-mode

%fray-cross
    %checkout
    %autogen
    %configure \
	--disable-nls \
	--with-libelf \
	--without-selinux \
	--without-perl \
	--with-python=2.4 \
	--with-zlib \
	--with-bzip2 \
	--with-beecrypt \
	--without-neon \
	--with-file=internal \
	--with-popt \
	--with-sqlite \
	--with-dbapi=sqlite \
	--with-db=internal \
	--with-lua=internal \
	--without-apidocs \
	--with-path-macros=... \
	--with-bugreport=support@windriver.com

%fray-target
    %checkout
    %autogen
    %configure \
	--disable-nls \
	--with-file=internal \
	--with-db=internal \
	--with-lua=internal \
	--without-apidocs \
	--with-beecrypt \
	--with-popt \
	--with-bugreport=support@windriver.com

%rse
    %standalone

%standalone
    ##
    ##  USE THIS DEVELOPER PROCEDURE IF YOU WANT TO REALLY
    ##  TEST-DRIVE RPM 5 ON ARBITRARY UNIX FLAVORS!
    ##
    ##  This developer procedure is for _fully_ stand-alone building RPM
    ##  5 on arbitrary Unix platforms and with a rather large functional
    ##  extend. It is very close to the procedure OpenPKG will use to
    ##  build RPM 5 in its "bootstrap" package ("openpkg") and hence
    ##  can be used to build RPM 5 from source and on a large number of
    ##  Unix flavors without any additional prerequisites (except the
    ##  development tools, of course). It especially doesn't require
    ##  any of the third-party libraries to be pre-installed in the
    ##  system. Instead it downloads and builds (and *not* installs)
    ##  them side-by-side with RPM 5.
    ##
    ##  NOTICE: As OpenPKG is mainly about using RPM in a true
    ##  stand-alone, self-contained and cross-platform environment,
    ##  this procedure unfortunately is a rather complex one as all(!)
    ##  third-party libraries are required to be built from scratch and
    ##  on arbitrary Unix platforms. This inherently requires lots of
    ##  fiddling with their build environment. Just treat the prepare()
    ##  function above as opaque and do not think about it. It just
    ##  contains all the essential parts of the OpenPKG .spec files for
    ##  achieving this. Nevertheless this whole procedure is completely
    ##  independent of any OpenPKG instance itself, of course.
    ##
    ##  This procedure was used by Ralf S. Engelschall to successfully
    ##  build RPM 5 under at least the following particular Unix
    ##  platforms (GNU shtool platform identifiers listed):
    ##
    ##      ix86-freebsd6.2
    ##      amd64-freebsd6.2
    ##      ix86-freebsd7.0
    ##      ix86-fedora7
    ##      ix86-debian3.1
    ##      ix86-debian4.0
    ##      ix86-rhel4
    ##      ix86-solaris9
    ##      sparc64-solaris8
    ##      sparc64-solaris9
    ##      sparc64-solaris10
    ##      amd64-solaris10
    ##

    #   prerequisite check
    if [ ".`(which shtool) 2>/dev/null | grep -v '^no'`" = . ]; then
        echo "devtool:ERROR: sorry, GNU Shtool (\"shtool\") required in \$PATH" 1>&2
        exit 1
    fi
    if [ ".`(which curl) 2>/dev/null | grep -v '^no'`" = . ]; then
        echo "devtool:ERROR: sorry, cURL (\"curl\") required in \$PATH" 1>&2
        exit 1
    fi

    #   third-party distribution versions
    v_zlib="1.2.3"
    v_bzip2="1.0.4"
    v_openssl="0.9.8e"
    v_expat="2.0.1"
    v_neon="0.26.4"
    v_beecrypt="4.1.2"
    v_db="4.5.20"
    v_sqlite="3.4.0"
    v_lua="5.1.2"
    v_file="4.21"
    v_popt="1.12"

    #   third-party distribution files
    dist=""
    dist="${dist} http://www.zlib.net/zlib-${v_zlib}.tar.gz"
    dist="${dist} http://www.bzip.org/${v_bzip2}/bzip2-${v_bzip2}.tar.gz"
    dist="${dist} ftp://ftp.openssl.org/source/openssl-${v_openssl}.tar.gz"
    dist="${dist} http://switch.dl.sourceforge.net/expat/expat-${v_expat}.tar.gz"
    dist="${dist} http://www.webdav.org/neon/neon-${v_neon}.tar.gz"
    dist="${dist} http://switch.dl.sourceforge.net/beecrypt/beecrypt-${v_beecrypt}.tar.gz"
    dist="${dist} http://download-uk.oracle.com/berkeley-db/db-${v_db}.tar.gz"
    dist="${dist} http://www.sqlite.org/sqlite-${v_sqlite}.tar.gz"
    dist="${dist} http://www.lua.org/ftp/lua-${v_lua}.tar.gz"
    dist="${dist} ftp://ftp.astron.com/pub/file/file-${v_file}.tar.gz"
    dist="${dist} http://rpm5.org/files/popt/popt-${v_popt}.tar.gz"

    #   third-party distribution patches (for portability and bugfix reasons only)
    dist="${dist} http://cvs.openpkg.org/openpkg-src/openssl/openssl.patch"
    dist="${dist} http://cvs.openpkg.org/openpkg-src/beecrypt/beecrypt.patch"
    dist="${dist} http://www.oracle.com/technology/products/berkeley-db/db/update/${v_db}/patch.${v_db}.1"
    dist="${dist} http://www.oracle.com/technology/products/berkeley-db/db/update/${v_db}/patch.${v_db}.2"
    dist="${dist} http://cvs.openpkg.org/openpkg-src/db/db.patch"
    dist="${dist} http://cvs.openpkg.org/openpkg-src/sqlite/sqlite.patch"
    dist="${dist} http://cvs.openpkg.org/openpkg-src/lua/lua.patch"
    dist="${dist} http://cvs.openpkg.org/openpkg-src/file/file.patch"
    dist="${dist} http://cvs.openpkg.org/openpkg-src/popt/popt.patch"

    #   third-party base directory, installation default prefix and platform
    base3rd="${DEVTOOL_SRCDIR}/../3rd"
    prefix="/tmp/rpm"
    platform=`shtool platform -n -L -S "" -C "+" -F '%<ap>-%<sp>'`

    #   prepare build environment
    prepare () {
        echo "++ establishing third-party area under ($base3rd)"
        for dir in "" src bin bin/$platform; do
            if [ ! -d "$base3rd/$dir" ]; then
                mkdir $base3rd/$dir || exit $?
            fi
        done

        echo "++ establishing third-party distribution files ($base3rd/src/)"
        for url in $dist; do
            file=`echo "$url" | sed -e 's;^.*/;;'`
            if [ ! -f "$base3rd/src/$file" ]; then
                echo "-- downloading $file"
                curl "-#" -o "$base3rd/src/$file" "$url" || exit $?
            fi
        done

        #   ZLib
        if [ ! -d "$base3rd/bin/$platform/zlib-${v_zlib}" ]; then
            echo "++ building third-party library zlib-${v_zlib}"
            (   cd $base3rd/bin/$platform
                rm -rf zlib-${v_zlib}
                gunzip <../../src/zlib-${v_zlib}.tar.gz | tar xf -
                (   cd zlib-${v_zlib}
                    ./configure
                    make libz.a
                ) || exit $?
            ) || exit $?
        fi

        #   BZip2
        if [ ! -d "$base3rd/bin/$platform/bzip2-${v_bzip2}" ]; then
            echo "++ building third-party library bzip2-${v_bzip2}"
            (   cd $base3rd/bin/$platform
                rm -rf bzip2-${v_bzip2}
                gunzip <../../src/bzip2-${v_bzip2}.tar.gz | tar xf -
                (   cd bzip2-${v_bzip2}
                    make libbz2.a bzip2
                ) || exit $?
            ) || exit $?
        fi

        #   OpenSSL
        if [ ! -d "$base3rd/bin/$platform/openssl-${v_openssl}" ]; then
            echo "++ building third-party library openssl-${v_openssl}"
            (   cd $base3rd/bin/$platform
                rm -rf openssl-${v_openssl}
                gunzip <../../src/openssl-${v_openssl}.tar.gz | tar xf -
                (   cd openssl-${v_openssl}
                    patch -p0 <../../../src/openssl.patch
                    shtool subst \
                        -e 's;-m486;-march=i486;g' \
                        -e 's;BN_LLONG *;;' \
                        Configure
                    shtool subst \
                        -e 's;test "$OSTYPE" = msdosdjgpp;true;' \
                        util/point.sh
                    shtool subst \
                        -e "1s;^.*\$;#!/usr/opkg/bin/perl;" \
                        Configure `find . -name "*.pl" -print`
                    opts=""
                    case `shtool platform -n -L -S "" -C "+" -F "%<ap>-%<sp>"` in
                        *-solaris*      ) opts="-lnsl -lsocket" ;;
                    esac
                    case `shtool platform -n -L -S "" -C "+" -F "%<ap>-%<sp>"` in
                        amd64-*          ) opts="$opts -fPIC" ;;
                        ia64-*           ) opts="$opts -fPIC" ;;
                        sparc64-freebsd* ) opts="$opts -fPIC" ;;
                    esac
                    ./config \
                        --prefix=%{l_prefix} \
                        no-asm no-shared no-dso \
                        no-zlib no-idea no-threads no-krb5 no-hw \
                        $opts
                    make build_libs build_apps
                    ( mkdir lib; cd lib; ln -s ../lib*.a . )
                ) || exit $?
            ) || exit $?
        fi

        #   Expat
        if [ ! -d "$base3rd/bin/$platform/expat-${v_expat}" ]; then
            echo "++ building third-party library expat-${v_expat}"
            (   cd $base3rd/bin/$platform
                rm -rf expat-${v_expat}
                gunzip <../../src/expat-${v_expat}.tar.gz | tar xf -
                (   cd expat-${v_expat}
                    ./configure \
                        --disable-shared
                    make libexpat.la
                ) || exit $?
            ) || exit $?
        fi

        #   Neon
        if [ ! -d "$base3rd/bin/$platform/neon-${v_neon}" ]; then
            echo "++ building third-party library neon-${v_neon}"
            (   cd $base3rd/bin/$platform
                rm -rf neon-${v_neon}
                gunzip <../../src/neon-${v_neon}.tar.gz | tar xf -
                (   cd neon-${v_neon}
                    ( echo "ac_cv_path_KRB5_CONFIG="
                    ) >config.cache
                    CPPFLAGS="-I`pwd`/../openssl-${v_openssl}/include -I`pwd`/../zlib-${v_zlib} -I`pwd`/../expat-${v_expat_date}/lib" \
                    LDFLAGS="-L`pwd`/../openssl-${v_openssl}/lib -L`pwd`/../zlib-${v_zlib} -L`pwd`/../expat-${v_expat_date}/lib -L`pwd`/../expat-${v_expat_date}/.libs" \
                    ./configure \
                        --cache-file=./config.cache \
                        --with-libs=/tmp \
                        --with-ssl=openssl \
                        --without-libxml2 \
                        --with-expat \
                        --enable-webdav \
                        --disable-nls \
                        --disable-shared \
                        --enable-static
                    make
                    ( cd src; ln -s . neon )
                ) || exit $?
            ) || exit $?
        fi

        #   BeeCrypt
        if [ ! -d "$base3rd/bin/$platform/beecrypt-${v_beecrypt}" ]; then
            echo "++ building third-party library beecrypt-${v_beecrypt}"
            (   cd $base3rd/bin/$platform
                rm -rf beecrypt-${v_beecrypt}
                gunzip <../../src/beecrypt-${v_beecrypt}.tar.gz | tar xf -
                (   cd beecrypt-${v_beecrypt}
                    patch -p0 <../../../src/beecrypt.patch
                    shtool subst \
                        -e 's;^[ 	][ 	]*#;#;' \
                        aes.c base64.c blowfish.c entropy.c fips186.c fips186.h md5.c \
                        md5.h mp.c mtprng.c mtprng.h sha1.c sha1.h sha256.c sha256.h timestamp.c
                    shtool subst \
                       -e 's;cppglue\.lo;;g' \
                       -e 's;cppglue\.cxx;;g' \
                       -e '/^CXX = /s;@CXX@;@CC@;g' \
                       Makefile.in
                    shtool subst \
                        -e '/LINENO: error: C[+]* preprocessor/{N;N;N;N;s/.*/:/;}' \
                        configure
                    ( echo 'ac_cv_have_dev_dsp=no'
                      echo 'ac_cv_have_dev_audio=no'
                      echo 'ac_cv_func_gettimeofday=yes'
                      echo 'bc_cv_as_noexecstack=no'
                    ) >config.cache
                    ./configure \
                        --without-cplusplus \
                        --without-java \
                        --without-python \
                        --with-cpu=none \
                        --with-arch=none \
                        --disable-threads \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   Berkeley-DB
        if [ ! -d "$base3rd/bin/$platform/db-${v_db}" ]; then
            echo "++ building third-party library db-${v_db}"
            (   cd $base3rd/bin/$platform
                rm -rf db-${v_db}
                gunzip <../../src/db-${v_db}.tar.gz | tar xf -
                (   cd db-${v_db}
                    patch -p0 <../../../src/patch.${v_db}.1
                    patch -p0 <../../../src/patch.${v_db}.2
                    patch -p0 <../../../src/db.patch
                    mutex="no"
                    case "$platform" in
                        ix86-*   ) mutex="x86/gcc-assembly"   ;;
                        ia64-*   ) mutex="ia64/gcc-assembly"  ;;
                        sparc*-* ) mutex="Sparc/gcc-assembly" ;;
                        ppc*-*   ) mutex="PPC/gcc-assembly"   ;;
                        alpha*-* ) mutex="ALPHA/gcc-assembly" ;;
                        *        ) mutex="UNIX/fcntl"         ;;
                    esac
                    cd build_unix
                    ../dist/configure \
                        --disable-compat185 \
                        --disable-cxx \
                        --disable-java \
                        --with-mutex="$mutex" \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   SQLite
        if [ ! -d "$base3rd/bin/$platform/sqlite-${v_sqlite}" ]; then
            echo "++ building third-party library sqlite-${v_sqlite}"
            (   cd $base3rd/bin/$platform
                rm -rf sqlite-${v_sqlite}
                gunzip <../../src/sqlite-${v_sqlite}.tar.gz | tar xf -
                (   cd sqlite-${v_sqlite}
                    patch -p0 <../../../src/sqlite.patch
                    CFLAGS="-DNDEBUG=1" \
                    LIBS="-lm" \
                    ./configure \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   Lua
        if [ ! -d "$base3rd/bin/$platform/lua-${v_lua}" ]; then
            echo "++ building third-party library lua-${v_lua}"
            (   cd $base3rd/bin/$platform
                rm -rf lua-${v_lua}
                gunzip <../../src/lua-${v_lua}.tar.gz | tar xf -
                (   cd lua-${v_lua}
                    patch -p0 <../../../src/lua.patch
                    platform="posix"
                    case "$platform" in
                        *-linux*   ) platform="linux"   ;;
                        *-freebsd* ) platform="bsd"     ;;
                        *-sunos*   ) platform="solaris" ;;
                    esac
                    make $platform
                ) || exit $?
            ) || exit $?
        fi

        #   File
        if [ ! -d "$base3rd/bin/$platform/file-${v_file}" ]; then
            echo "++ building third-party library lua-${v_file}"
            (   cd $base3rd/bin/$platform
                rm -rf file-${v_file}
                gunzip <../../src/file-${v_file}.tar.gz | tar xf -
                (   cd file-${v_file}
                    patch -p0 <../../../src/file.patch
                    ( echo "ac_cv_lib_z_gzopen=no"
                    ) >config.cache
                    ./configure \
                        --cache-file=./config.cache \
                        --disable-shared \
                        --disable-nls
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   POPT
        if [ ! -d "$base3rd/bin/$platform/popt-${v_popt}" ]; then
            echo "++ building third-party library popt-${v_popt}"
            (   cd $base3rd/bin/$platform
                rm -rf popt-${v_popt}
                gunzip <../../src/popt-${v_popt}.tar.gz | tar xf -
                (   cd popt-${v_popt}
                    patch -p0 <../../../src/popt.patch
                    CPPFLAGS="-DOPENPKG" \
                    ./configure \
                        --disable-shared \
                        --disable-nls
                    make
                ) || exit $?
            ) || exit $?
        fi
    }

    #   configure build environment
    autogen () {
        echo "++ generating build environment"
        %autogen
    }

    #   configure build environment
    configure () {
        echo "++ cleaning up build environment"
        ( cd ${DEVTOOL_SRCDIR}; make distclean || true ) >/dev/null 2>&1

        echo "++ configuring build environment"
        base3rd="`cd $base3rd && pwd`"
        CC="cc"
        CFLAGS=""
        CPPFLAGS=""
        LDFLAGS=""
        LIBS=""
        if [ ".`(which gcc) 2>/dev/null | grep -v '^no'`" != . ]; then
            CC="gcc"
        fi
        if [ ".`(which ccache) 2>/dev/null | grep -v '^no'`" != . ]; then
            CC="ccache $CC"
        fi
        if [ ".`grep 'OpenPKG RPM' ${DEVTOOL_SRCDIR}/rpmqv.c`" != . ]; then
            CPPFLAGS="$CPPFLAGS -DOPENPKG"
        fi
        LDFLAGS="$LDFLAGS -L$base3rd/openssl-${v_openssl}" # shameless workaround for Neon
        LIBS="$LIBS -lssl -lcrypto"                        # shameless workaround for Neon
        LIBS="$LIBS -lm"                                   # shameless workaround for SQLite
        export CC
        export CFLAGS
        export CPPFLAGS
        export LDFLAGS
        export LIBS
        ${DEVTOOL_SRCDIR}/configure -v \
            --prefix="$prefix" \
            --mandir="$prefix/man" \
            --with-path-cfg="$prefix/etc/rpm" \
            --with-path-rpmpopt="$prefix/lib/rpm/rpmpopt:$prefix/etc/rpm/rpmpopt:~/.rpmpopt" \
            --with-path-macros="$prefix/lib/rpm/macros:$prefix/etc/rpm/macros:~/.rpmmacros" \
            --with-path-lib="$prefix/lib/rpm" \
            --with-path-locale="$prefix/share/rpm/locale" \
            --with-path-database="$prefix/var/rpm/db" \
            --with-path-sources="$prefix/var/rpm/src" \
            --with-bugreport="openpkg-users@openpkg.org" \
            --with-beecrypt="$base3rd/bin/$platform/beecrypt-${v_beecrypt}" \
            --with-lua="$base3rd/bin/$platform/lua-${v_lua}/src" \
            --with-file="$base3rd/bin/$platform/file-${v_file}" \
            --with-zlib="$base3rd/bin/$platform/zlib-${v_zlib}" \
            --with-bzip2="$base3rd/bin/$platform/bzip2-${v_bzip2}" \
            --with-neon="$base3rd/bin/$platform/neon-${v_neon}" \
            --with-popt="$base3rd/bin/$platform/popt-${v_popt}" \
            --with-sqlite="$base3rd/bin/$platform/sqlite-${v_sqlite}" \
            --with-db="$base3rd/bin/$platform/db-${v_db}/build_unix" \
            --without-db-rpc \
            --without-db-largefile \
            --with-db-mutex="UNIX/fcntl" \
            --without-pthreads \
            --without-libelf \
            --without-selinux \
            --without-perl \
            --without-python \
            --without-apidocs \
            --enable-build-warnings \
            --disable-build-lib64 \
            --disable-shared \
            --disable-rpath \
            --disable-nls
    }

    #   build RPM
    build () {
        make
    }

    #   install RPM
    install () {
        rm -rf $prefix
        make install
    }

    #   test RPM (trivially only)
    testdrive () {
        $prefix/bin/rpm --initdb
        $prefix/bin/rpm --import ${DEVTOOL_SRCDIR}/pubkeys/JBJ-GPG-KEY
        $prefix/bin/rpm -qa
        $prefix/bin/rpm -Va
    }
    
    #   do all at once
    all () {
        prepare
        autogen
        configure
        build
        install
        testdrive
    }

    #   dispatch command
    if [ $# -eq 0 ]; then
        set -- all
    fi
    ( eval ${1+"$@"} ) 2>&1

%tarball
    %checkout
    %autogen

