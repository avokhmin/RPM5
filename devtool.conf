##
##  devtool.conf -- Development Tool Configuration for RPM 5
##

%common
    MODULE_NAMES="db lua zlib file"
    MODULE_TAG_DB=""
    MODULE_TAG_LUA=""
    MODULE_TAG_ZLIB=""
    MODULE_TAG_FILE=""

%checkout
    for name in $MODULE_NAMES "$@"; do
        release=MODULE_TAG_`echo ${name} | tr '[a-z]' '[A-Z]'`
        release=`eval echo \\$${release}`
        if [ ".${release}" = . ]; then
            if [ -d ${DEVTOOL_SRCDIR}/${name}/CVS ]; then
                echo "===> ${name} (cvs up HEAD)"
                ( cd ${DEVTOOL_SRCDIR}/${name} && cvs -q up -A -P -d )
            else
                echo "===> ${name} (cvs co HEAD)"
                ( cd ${DEVTOOL_SRCDIR} && cvs co -A -d ${name} ${name} )
            fi
        else
            if [ -d ${DEVTOOL_SRCDIR}/${name}/CVS ]; then
                echo "===> ${name} (cvs up ${release})"
                ( cd ${DEVTOOL_SRCDIR}/${name} && cvs -q up -P -d -r${release} )
            else
                echo "===> ${name} (cvs co ${release})"
                ( cd ${DEVTOOL_SRCDIR} && cvs co -r${release} -d ${name} ${name} )
            fi
        fi
        echo "<=== ${name}"
    done

%autogen
    ( cd ${DEVTOOL_SRCDIR} && sh autogen.sh )

%configure
    ${DEVTOOL_SRCDIR}/configure \
        --verbose \
        "$@"

%make
    #   intentionally just a pass-through target
    #   (important for use with devtool.bashrc)
    make "$@"

%prepare
    %checkout
    %autogen
    %configure "$@"

%jbj
    %checkout
    %system

%system
    #   configure RPM 5 with maximum internal (independence) and maximum
    #   external (reusability) extend as it usually is the case when
    #   building and running RPM as the system package manager on a
    #   Linux-based system like Fedora. This requires both the latest
    #   development tools and the third-party libraries to be installed
    #   in system locations.
    %autogen
    %configure \
        --verbose \
        --prefix=/usr \
        --with-db=internal \
        --with-db-tools-integrated \
        --with-zlib=internal \
        --with-file=internal \
        --with-lua=internal \
        --with-sqlite=external \
        --with-beecrypt=external \
        --with-neon=external \
        --with-bzip2=external \
        --with-popt=external \
        --with-keyutils=external \
        --with-libelf \
        --with-selinux \
        --with-python \
        --without-perl \
        --with-db-tools-integrated \
        --with-build-extlibdep \
        --with-build-maxextlibdep \
        --enable-build-pic \
        --enable-build-pie \
        --enable-build-versionscript \
        --enable-build-warnings \
        --enable-build-debug \
        --enable-maintainer-mode

%fray-cross
    %checkout
    %autogen
    %configure \
        --disable-nls \
        --with-libelf \
        --without-selinux \
        --without-perl \
        --with-python=2.4 \
        --with-zlib \
        --with-bzip2 \
        --with-beecrypt \
        --without-neon \
        --with-file=internal \
        --with-popt \
        --with-sqlite \
        --with-dbapi=sqlite \
        --with-db=internal \
        --with-lua=internal \
        --without-apidocs \
        --with-path-macros=... \
        --with-bugreport=support@windriver.com

%fray-target
    %checkout
    %autogen
    %configure \
        --disable-nls \
        --with-file=internal \
        --with-db=internal \
        --with-lua=internal \
        --without-apidocs \
        --with-beecrypt \
        --with-popt \
        --with-bugreport=support@windriver.com

%rse
    %standalone

%standalone
    ##
    ##  USE THIS DEVELOPER PROCEDURE IF YOU WANT TO REALLY
    ##  TEST-DRIVE RPM 5 ON ARBITRARY UNIX FLAVORS!
    ##
    ##  This developer procedure is for _fully_ stand-alone building RPM
    ##  5 on arbitrary Unix platforms and with a rather large functional
    ##  extend. It is very close to the procedure OpenPKG will use to
    ##  build RPM 5 in its "bootstrap" package ("openpkg") and hence
    ##  can be used to build RPM 5 from source and on a large number of
    ##  Unix flavors without any additional prerequisites (except the
    ##  development tools, of course). It especially doesn't require
    ##  any of the third-party libraries to be pre-installed in the
    ##  system. Instead it downloads and builds (and *not* installs)
    ##  them side-by-side with RPM 5.
    ##
    ##  NOTICE: As OpenPKG is mainly about using RPM in a true
    ##  stand-alone, self-contained and cross-platform environment,
    ##  this procedure unfortunately is a rather complex one as all(!)
    ##  third-party libraries are required to be built from scratch and
    ##  on arbitrary Unix platforms. This inherently requires lots of
    ##  fiddling with their build environment. Just treat the prepare()
    ##  function below as opaque and do not think about it. It just
    ##  contains all the essential parts of the OpenPKG .spec files for
    ##  achieving this. Nevertheless this whole procedure is completely
    ##  independent of any OpenPKG instance itself, of course.
    ##
    ##  This procedure was used by Ralf S. Engelschall to successfully
    ##  build RPM 5 under at least the following particular Unix
    ##  platforms (each one defined by the combination of hardware
    ##  architecture, operating system and compiler):
    ##
    ##  o 2007-07-19: ix86-freebsd6.2-gcc4.2.0
    ##  o 2007-07-19: ix86-freebsd6.2-gcc4.3.0s20070713
    ##  o 2007-07-17: ix86-freebsd6.2-gcc3.4
    ##  o 2007-07-17: amd64-freebsd6.2-gcc4.1.2
    ##  o 2007-07-17: ix86-freebsd7.0-gcc4.1.2
    ##  o 2007-07-17: ia64-freebsd6.2-gcc4.1.2
    ##  o 2007-07-18: ix86-fedora7-gcc4.2.0
    ##  o 2007-07-19: ix86-fedora7-sunstudio12
    ##  o 2007-07-19: ix86-fedora7-icc10.0
    ##  o 2007-07-17: ix86-debian3.1-gcc4.1.2
    ##  o 2007-07-17: ix86-debian4.0-gcc4.2.0
    ##  o 2007-07-17: ix86-rhel4-gcc4.1.2
    ##  o 2007-07-17: ix86-solaris9-gcc4.1.2
    ##  o 2007-07-17: sparc64-solaris8-gcc4.1.2
    ##  o 2007-07-17: sparc64-solaris9-gcc4.1.2
    ##  o 2007-07-17: sparc64-solaris10-gcc4.1.2
    ##  o 2007-07-17: amd64-solaris10-gcc4.1.2
    ##  o 2007-07-24: ppc-macosx10.4-gcc4.0.1
    ##  o 2007-07-25: ppc-aix5.3-gcc3.3.2
    ##

    #   source reusable companion modules
    @source %standalone-modules

    #   execute implicit shared modules
    standalone_defines
    standalone_prerequisite

    #   execute explicit requested module
    [ $# -eq 0 ] && set -- all
    cmd="standalone_$1"; shift
    ( eval $cmd ${1+"$@"} ) 2>&1

%standalone-modules
    standalone_defines () {
        #   third-party development tools distribution versions
        v_m4="1.4.9"
        v_autoconf="2.61"
        v_automake="1.10"
        v_libtool="1.5.24"
        v_gettext="0.16.1"

        #   third-party library distribution versions
        v_zlib="1.2.3"
        v_bzip2="1.0.4"
        v_openssl="0.9.8e"
        v_expat="2.0.1"
        v_neon="0.27.2"
        v_beecrypt="4.1.2"
        v_db="4.6.21"
        v_sqlite="3.5.1"
        v_lua="5.1.2"
        v_file="4.21"
        v_popt="1.12"
        v_config="20070825"

        #   third-party distribution files
        dist=""
        dist="${dist} m4-${v_m4}.tar.gz,http://rpm5.org/files/3rd/,ftp://ftp.gnu.org/gnu/m4/"
        dist="${dist} autoconf-${v_autoconf}.tar.gz,http://rpm5.org/files/3rd/,ftp://ftp.gnu.org/gnu/autoconf/"
        dist="${dist} automake-${v_automake}.tar.gz,http://rpm5.org/files/3rd/,ftp://sources.redhat.com/pub/automake/"
        dist="${dist} libtool-${v_libtool}.tar.gz,http://rpm5.org/files/3rd/,ftp://ftp.gnu.org/gnu/libtool/"
        dist="${dist} gettext-${v_gettext}.tar.gz,http://rpm5.org/files/3rd/,ftp://ftp.gnu.org/gnu/gettext/"
        dist="${dist} zlib-${v_zlib}.tar.gz,http://rpm5.org/files/3rd/,http://www.zlib.net/"
        dist="${dist} bzip2-${v_bzip2}.tar.gz,http://rpm5.org/files/3rd/,http://www.bzip.org/${v_bzip2}/"
        dist="${dist} openssl-${v_openssl}.tar.gz,http://rpm5.org/files/3rd/,ftp://ftp.openssl.org/source/"
        dist="${dist} expat-${v_expat}.tar.gz,http://rpm5.org/files/3rd/,http://switch.dl.sourceforge.net/expat/"
        dist="${dist} neon-${v_neon}.tar.gz,http://rpm5.org/files/3rd/,http://www.webdav.org/neon/"
        dist="${dist} beecrypt-${v_beecrypt}.tar.gz,http://rpm5.org/files/3rd/,http://switch.dl.sourceforge.net/beecrypt/"
        dist="${dist} db-${v_db}.tar.gz,http://rpm5.org/files/3rd/,http://download-uk.oracle.com/berkeley-db/"
        dist="${dist} sqlite-${v_sqlite}.tar.gz,http://rpm5.org/files/3rd/,http://www.sqlite.org/"
        dist="${dist} lua-${v_lua}.tar.gz,http://rpm5.org/files/3rd/,http://www.lua.org/ftp/"
        dist="${dist} file-${v_file}.tar.gz,http://rpm5.org/files/3rd/,ftp://ftp.astron.com/pub/file/"
        dist="${dist} popt-${v_popt}.tar.gz,http://rpm5.org/files/3rd/,http://rpm5.org/files/popt/"

        #   third-party distribution patches (for portability and bugfix reasons only)
        dist="${dist} automake-${v_automake}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} gettext-${v_gettext}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} openssl-${v_openssl}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} beecrypt-${v_beecrypt}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} db-${v_db}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} sqlite-${v_sqlite}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} lua-${v_lua}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} file-${v_file}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} popt-${v_popt}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} config.guess-${v_config},http://rpm5.org/files/3rd/"
        dist="${dist} config.sub-${v_config},http://rpm5.org/files/3rd/"
    }

    standalone_prerequisite () {
        #   tool prerequisite check
        for tool in gzip tar patch perl; do
            variable=`echo "$tool" | tr '[a-z]' '[A-Z]'`
            eval "val=\"\${$variable+set}\""
            if [ ".$val" = .set ]; then
                eval "$tool=\"\${$variable}\""
            else
                if [ ".`(which $tool) 2>/dev/null | egrep '^/'`" != . ]; then
                    eval "$tool=\"$tool\""
                else
                    echo "devtool:ERROR: sorry, \"$tool\" required in \$PATH (or set \$$variable)" 1>&2
                    exit 1
                fi
            fi
            eval "export $tool"
        done

        #   determine compiler (to make sure the whole library and application
        #   chain is built with the same one in order to avoid incompatibilities)
        if [ ".$CC" != . ]; then
            cc="$CC"
        elif [ ".`(which gcc) 2>/dev/null | egrep '^/'`" != . ]; then
            cc="gcc"
        elif [ ".`(which icc) 2>/dev/null | egrep '^/'`" != . ]; then
            cc="icc"
        elif [ ".`(which cc) 2>/dev/null | egrep '^/'`" != . ]; then
            cc="cc"
        else
            echo "devtool:ERROR: sorry, C compiler (\"cc\") required in \$PATH (or set \$CC)" 1>&2
            exit 1
        fi
        if [ ".`(which ccache) 2>/dev/null | egrep '^/'`" != . ]; then
            cc="ccache $cc"
        fi

        #    determine some local tools
        SHTOOL="`cd ${DEVTOOL_SRCDIR} && pwd`/devtool.shtool"

        #   third-party base directory, installation default prefix and platform
        base3rd="${DEVTOOL_SRCDIR}/../3rd"
        prefix="/tmp/rpm"
        platform=`$SHTOOL platform -n -L -S "" -C "+" -F '%<ap>-%<sp>'`
    }

    standalone_download () {
        #   helper function for downloading a file from an URL
        file="$1"
        name=`echo "$file" | sed -e 's;^.*/\([^/]*\)$;\1;'`
        for url in `echo "$2" | sed -e 's/,/ /g'`; do
            echo "-- downloading $url$name"
            if [ ".`(which curl) 2>/dev/null | egrep '^/'`" != . ]; then
                curl -s -o "$file" "$url$name" || continue
            elif [ ".`(which wget) 2>/dev/null | egrep '^/'`" != . ]; then
                wget -q -O "$file" "$url$name" || continue
            elif [ ".`(which fetch) 2>/dev/null | egrep '^/'`" != . ]; then
                fetch -o "$file" "$url$name" || continue
            elif [ ".`(which lwp-download) 2>/dev/null | egrep '^/'`" != . ]; then
                lwp-download "$url$name" "$file" || continue
            else
                echo "devtool:ERROR: sorry, no download tool found in \$PATH (\"curl\", \"wget\", \"fetch\", \"lwp-download\")" 1>&2
                exit 1
            fi
            if [ -f "$file" ]; then
                break
            fi
        done
        if [ ! -f "$file" ]; then
            echo "devtool:ERROR: failed to download \"$name\"" 1>&2
            exit 1
        fi
    }

    #   prepare build environment
    standalone_prepare () {
        echo "++ establishing third-party area under ($base3rd)"
        for dir in "" src bin bin/$platform run run/$platform; do
            if [ ! -d "$base3rd/$dir" ]; then
                mkdir $base3rd/$dir || exit $?
            fi
        done

        echo "++ establishing third-party distribution files ($base3rd/src/)"
        for spec in $dist; do
            file=`echo "$spec" | sed -e 's;,.*$;;'`
            urls=`echo "$spec" | sed -e 's;^[^,]*;;'`
            if [ ! -f "$base3rd/src/$file" ]; then
                standalone_download "$base3rd/src/$file" "$urls" || exit $?
            fi
        done

        #   extend environment
        prefix_tools="`cd $base3rd/run/$platform && pwd`"
        PATH="$prefix_tools/bin:$prefix_tools/sbin:$PATH"
        PATH="$PATH:/bin:/usr/bin:/sbin:/usr/sbin"
        export PATH

        #   GNU m4 (installed development tool)
        if [ ! -d "$base3rd/bin/$platform/m4-${v_m4}" ]; then
            echo "++ building third-party development tool m4-${v_m4}"
            (   cd $base3rd/bin/$platform
                rm -rf m4-${v_m4}
                $gzip -d -c ../../src/m4-${v_m4}.tar.gz | $tar xf -
                (   cd m4-${v_m4}
                    CC="$cc" \
                    GREP="grep" \
                    ./configure \
                        --prefix="$prefix_tools" \
                        --disable-nls
                    make
                    make install
                    rm -f $prefix_tools/bin/gm4
                    ln $prefix_tools/bin/m4 \
                       $prefix_tools/bin/gm4
                ) || exit $?
            ) || exit $?
        fi

        #   GNU autoconf (installed development tool)
        if [ ! -d "$base3rd/bin/$platform/autoconf-${v_autoconf}" ]; then
            echo "++ building third-party development tool autoconf-${v_autoconf}"
            (   cd $base3rd/bin/$platform
                rm -rf autoconf-${v_autoconf}
                $gzip -d -c ../../src/autoconf-${v_autoconf}.tar.gz | $tar xf -
                (   cd autoconf-${v_autoconf}
                    CC="$cc" \
                    ACLOCAL=true \
                    AUTOMAKE=true \
                    AUTOCONF=true \
                    AUTOHEADER=true \
                    MAKEINFO=true \
                    GREP=grep \
                    ./configure \
                        --prefix="$prefix_tools"
                    make
                    make install
                ) || exit $?
            ) || exit $?
        fi

        #   GNU automake (installed development tool)
        if [ ! -d "$base3rd/bin/$platform/automake-${v_automake}" ]; then
            echo "++ building third-party development tool automake-${v_automake}"
            (   cd $base3rd/bin/$platform
                rm -rf automake-${v_automake}
                $gzip -d -c ../../src/automake-${v_automake}.tar.gz | $tar xf -
                (   cd automake-${v_automake}
                    $patch -p0 <../../../src/automake-${v_automake}.patch
                    $SHTOOL subst \
                        -e "s;^\(.SUFFIXES: .*\) \.info \(.*\);\1 \2;" \
                        doc/Makefile.in
                    CC="$cc" \
                    ACLOCAL=true \
                    AUTOMAKE=true \
                    AUTOCONF=true \
                    AUTOHEADER=true \
                    MAKEINFO=true \
                    GREP=grep \
                    ./configure \
                        --prefix="$prefix_tools"
                    make
                    make install
                ) || exit $?
            ) || exit $?
        fi

        #   GNU libtool (installed development tool)
        if [ ! -d "$base3rd/bin/$platform/libtool-${v_libtool}" ]; then
            echo "++ building third-party development tool libtool-${v_libtool}"
            (   cd $base3rd/bin/$platform
                rm -rf libtool-${v_libtool}
                $gzip -d -c ../../src/libtool-${v_libtool}.tar.gz | $tar xf -
                (   cd libtool-${v_libtool}
                    $SHTOOL subst \
                        -e 's;grep ggrep;grep ggrep egrep;g' \
                        -e 's;-e .-(cannot match)-.;;g' \
                        `find . -name configure -print`
                    CC="$cc" \
                    GREP=grep \
                    ./configure \
                        --prefix="$prefix_tools" \
                        --enable-static \
                        --enable-shared
                    make
                    make install
                    rm -f $prefix_tools/bin/glibtoolize
                    ln $prefix_tools/bin/libtoolize \
                       $prefix_tools/bin/glibtoolize
                ) || exit $?
            ) || exit $?
        fi

        #   GNU gettext (installed development tool)
        if [ ! -d "$base3rd/bin/$platform/gettext-${v_gettext}" ]; then
            echo "++ building third-party development tool gettext-${v_gettext}"
            (   cd $base3rd/bin/$platform
                rm -rf gettext-${v_gettext}
                $gzip -d -c ../../src/gettext-${v_gettext}.tar.gz | $tar xf -
                (   cd gettext-${v_gettext}
                    $patch -p0 <../../../src/gettext-${v_gettext}.patch
                    $SHTOOL subst \
                        -e '/localcharset.\$lo/d' \
                        gettext-runtime/intl/Makefile.in
                    $SHTOOL subst \
                        -e 's;\(SUBDIRS.*=.*\)intl-java ;\1;' \
                        -e 's;\(SUBDIRS.*=.*\)intl-csharp ;\1;' \
                         gettext-runtime/Makefile.in
                    $SHTOOL subst \
                        -e 's;^.*intl-java/Makefile.*$;;' \
                        -e 's;^.*intl-csharp/Makefile.*$;;' \
                        gettext-runtime/configure
                    $SHTOOL subst \
                        -e 's;@BUILDJAVA@;no;g' \
                        -e 's;@BUILDJAVAEXE@;no;g' \
                        -e 's;@BUILDCSHARP@;no;g' \
                        gettext-tools/src/Makefile.in
                    $SHTOOL subst \
                        -e 's;^\(SUBDIRS =.*\)tests examples;\1;' \
                        gettext-tools/Makefile.in
                    $SHTOOL subst \
                        -e 's;\#if USEJEXE;#ifdef USEJEXE;' \
                        gettext-tools/src/read-java.c \
                        gettext-tools/src/urlget.c
                    CC="$cc" \
                    GREP="grep" \
                    ./configure \
                        --prefix="$prefix_tools" \
                        --without-libiconv-prefix \
                        --with-included-gettext \
                        --without-libexpat-prefix \
                        --disable-libasprintf \
                        --disable-threads \
                        --disable-csharp \
                        --disable-java \
                        --disable-nls \
                        --disable-shared
                    make
                    make install
                ) || exit $?
            ) || exit $?
        fi

        #   ZLib (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/zlib-${v_zlib}" ]; then
            echo "++ building third-party library zlib-${v_zlib}"
            (   cd $base3rd/bin/$platform
                rm -rf zlib-${v_zlib}
                $gzip -d -c ../../src/zlib-${v_zlib}.tar.gz | $tar xf -
                (   cd zlib-${v_zlib}
                    CC="$cc" \
                    ./configure
                    make libz.a
                ) || exit $?
            ) || exit $?
        fi

        #   BZip2 (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/bzip2-${v_bzip2}" ]; then
            echo "++ building third-party library bzip2-${v_bzip2}"
            (   cd $base3rd/bin/$platform
                rm -rf bzip2-${v_bzip2}
                $gzip -d -c ../../src/bzip2-${v_bzip2}.tar.gz | $tar xf -
                (   cd bzip2-${v_bzip2}
                    make CC="$cc" libbz2.a bzip2
                ) || exit $?
            ) || exit $?
        fi

        #   OpenSSL (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/openssl-${v_openssl}" ]; then
            echo "++ building third-party library openssl-${v_openssl}"
            (   cd $base3rd/bin/$platform
                rm -rf openssl-${v_openssl}
                $gzip -d -c ../../src/openssl-${v_openssl}.tar.gz | $tar xf -
                (   cd openssl-${v_openssl}
                    $patch -p0 <../../../src/openssl-${v_openssl}.patch
                    $SHTOOL subst \
                        -e 's;-m486;-march=i486;g' \
                        -e 's;BN_LLONG *;;' \
                        Configure
                    $SHTOOL subst \
                        -e 's;test "$OSTYPE" = msdosdjgpp;true;' \
                        util/point.sh
                    $SHTOOL subst \
                        -e "1s;^.*\$;#!$PERL;" \
                        Configure `find . -name "*.pl" -print`
                    opts=""
                    case `$SHTOOL platform -n -L -S "" -C "+" -F "%<ap>-%<sp>"` in
                        *-solaris*      ) opts="-lnsl -lsocket" ;;
                    esac
                    case `$SHTOOL platform -n -L -S "" -C "+" -F "%<ap>-%<sp>"` in
                        amd64-*          ) opts="$opts -fPIC" ;;
                        ia64-*           ) opts="$opts -fPIC" ;;
                        sparc64-freebsd* ) opts="$opts -fPIC" ;;
                    esac
                    CC="$cc" \
                    ./config \
                        --prefix=%{l_prefix} \
                        no-asm no-shared no-dso \
                        no-zlib no-idea no-threads no-krb5 no-hw \
                        $opts
                    make build_libs build_apps
                    ( mkdir lib; cd lib; ln -s ../lib*.a . )
                ) || exit $?
            ) || exit $?
        fi

        #   Expat (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/expat-${v_expat}" ]; then
            echo "++ building third-party library expat-${v_expat}"
            (   cd $base3rd/bin/$platform
                rm -rf expat-${v_expat}
                $gzip -d -c ../../src/expat-${v_expat}.tar.gz | $tar xf -
                (   cd expat-${v_expat}
                    CC="$cc" \
                    ./configure \
                        --disable-shared
                    make libexpat.la
                ) || exit $?
            ) || exit $?
        fi

        #   Neon (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/neon-${v_neon}" ]; then
            echo "++ building third-party library neon-${v_neon}"
            (   cd $base3rd/bin/$platform
                rm -rf neon-${v_neon}
                $gzip -d -c ../../src/neon-${v_neon}.tar.gz | $tar xf -
                (   cd neon-${v_neon}
                    ( echo "ac_cv_path_KRB5_CONFIG="
                    ) >config.cache
                    CC="$cc" \
                    CPPFLAGS="-I`pwd`/../openssl-${v_openssl}/include -I`pwd`/../zlib-${v_zlib} -I`pwd`/../expat-${v_expat}/lib" \
                    LDFLAGS="-L`pwd`/../openssl-${v_openssl}/lib -L`pwd`/../zlib-${v_zlib} -L`pwd`/../expat-${v_expat}/lib -L`pwd`/../expat-${v_expat}/.libs" \
                    ./configure \
                        --cache-file=./config.cache \
                        --with-libs=/tmp \
                        --with-ssl=openssl \
                        --without-libxml2 \
                        --with-expat \
                        --enable-webdav \
                        --disable-nls \
                        --disable-shared \
                        --enable-static
                    make
                    ( cd src; ln -s . neon )
                ) || exit $?
            ) || exit $?
        fi

        #   BeeCrypt (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/beecrypt-${v_beecrypt}" ]; then
            echo "++ building third-party library beecrypt-${v_beecrypt}"
            (   cd $base3rd/bin/$platform
                rm -rf beecrypt-${v_beecrypt}
                $gzip -d -c ../../src/beecrypt-${v_beecrypt}.tar.gz | $tar xf -
                (   cd beecrypt-${v_beecrypt}
                    $patch -p0 <../../../src/beecrypt-${v_beecrypt}.patch
                    cp ../../../src/config.guess-${v_config} config.guess
                    cp ../../../src/config.sub-${v_config} config.sub
                    $SHTOOL subst \
                        -e 's;^[ 	][ 	]*#;#;' \
                        aes.c base64.c blowfish.c entropy.c fips186.c fips186.h md5.c \
                        md5.h mp.c mtprng.c mtprng.h sha1.c sha1.h sha256.c sha256.h timestamp.c
                    $SHTOOL subst \
                       -e 's;cppglue\.lo;;g' \
                       -e 's;cppglue\.cxx;;g' \
                       -e '/^CXX = /s;@CXX@;@CC@;g' \
                       Makefile.in
                    $SHTOOL subst \
                        -e '/LINENO: error: C[+]* preprocessor/{N;N;N;N;s/.*/:/;}' \
                        configure
                    ( echo 'ac_cv_have_dev_dsp=no'
                      echo 'ac_cv_have_dev_audio=no'
                      echo 'ac_cv_func_gettimeofday=yes'
                      echo 'bc_cv_as_noexecstack=no'
                    ) >config.cache
                    CC="$cc" \
                    ./configure \
                        --without-cplusplus \
                        --without-java \
                        --without-python \
                        --with-cpu=none \
                        --with-arch=none \
                        --disable-threads \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   Berkeley-DB (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/db-${v_db}" ]; then
            echo "++ building third-party library db-${v_db}"
            (   cd $base3rd/bin/$platform
                rm -rf db-${v_db}
                $gzip -d -c ../../src/db-${v_db}.tar.gz | $tar xf -
                (   cd db-${v_db}
                    $patch -p0 <../../../src/db-${v_db}.patch
                    mutex="no"
                    case "$platform" in
                        ix86-*   ) mutex="x86/gcc-assembly"   ;;
                        ia64-*   ) mutex="ia64/gcc-assembly"  ;;
                        sparc*-* ) mutex="Sparc/gcc-assembly" ;;
                        ppc*-*   ) mutex="PPC/gcc-assembly"   ;;
                        alpha*-* ) mutex="ALPHA/gcc-assembly" ;;
                        *        ) mutex="UNIX/fcntl"         ;;
                    esac
                    cd build_unix
                    CC="$cc" \
                    ../dist/configure \
                        --disable-compat185 \
                        --disable-cxx \
                        --disable-java \
                        --with-mutex="$mutex" \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   SQLite (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/sqlite-${v_sqlite}" ]; then
            echo "++ building third-party library sqlite-${v_sqlite}"
            (   cd $base3rd/bin/$platform
                rm -rf sqlite-${v_sqlite}
                $gzip -d -c ../../src/sqlite-${v_sqlite}.tar.gz | $tar xf -
                (   cd sqlite-${v_sqlite}
                    $patch -p0 <../../../src/sqlite-${v_sqlite}.patch
                    CC="$cc" \
                    CFLAGS="-DNDEBUG=1" \
                    LIBS="-lm" \
                    ./configure \
                        --disable-utf8 \
                        --disable-readline \
                        --disable-threadsafe \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   Lua (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/lua-${v_lua}" ]; then
            echo "++ building third-party library lua-${v_lua}"
            (   cd $base3rd/bin/$platform
                rm -rf lua-${v_lua}
                $gzip -d -c ../../src/lua-${v_lua}.tar.gz | $tar xf -
                (   cd lua-${v_lua}
                    $patch -p0 <../../../src/lua-${v_lua}.patch
                    platform="posix"
                    case "$platform" in
                        *-linux*   ) platform="linux"   ;;
                        *-freebsd* ) platform="bsd"     ;;
                        *-sunos*   ) platform="solaris" ;;
                    esac
                    make CC="$cc" $platform
                ) || exit $?
            ) || exit $?
        fi

        #   File (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/file-${v_file}" ]; then
            echo "++ building third-party library file-${v_file}"
            (   cd $base3rd/bin/$platform
                rm -rf file-${v_file}
                $gzip -d -c ../../src/file-${v_file}.tar.gz | $tar xf -
                (   cd file-${v_file}
                    $patch -p0 <../../../src/file-${v_file}.patch
                    ( echo "ac_cv_lib_z_gzopen=no"
                    ) >config.cache
                    CC="$cc" \
                    ./configure \
                        --cache-file=./config.cache \
                        --disable-shared \
                        --disable-nls
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   POPT (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/popt-${v_popt}" ]; then
            echo "++ building third-party library popt-${v_popt}"
            (   cd $base3rd/bin/$platform
                rm -rf popt-${v_popt}
                $gzip -d -c ../../src/popt-${v_popt}.tar.gz | $tar xf -
                (   cd popt-${v_popt}
                    $patch -p0 <../../../src/popt-${v_popt}.patch
                    CC="$cc" \
                    CPPFLAGS="-DOPENPKG" \
                    ./configure \
                        --disable-shared \
                        --disable-nls
                    make
                ) || exit $?
            ) || exit $?
        fi
    }

    #   configure build environment
    standalone_autogen () {
        echo "++ generating build environment"
        %autogen
    }

    #   configure build environment
    standalone_configure () {
        echo "++ cleaning up build environment"
        ( cd ${DEVTOOL_SRCDIR}; make distclean || true ) >/dev/null 2>&1

        echo "++ configuring build environment"
        base3rd="`cd $base3rd && pwd`"
        CFLAGS=""
        CPPFLAGS=""
        LDFLAGS=""
        LIBS=""
        if [ ".`grep 'OpenPKG RPM' ${DEVTOOL_SRCDIR}/rpmqv.c`" != . ]; then
            CPPFLAGS="$CPPFLAGS -DOPENPKG"
        fi
        LDFLAGS="$LDFLAGS -L$base3rd/bin/$platform/openssl-${v_openssl}" # shameless workaround for Neon
        LIBS="$LIBS -lssl -lcrypto"                                      # shameless workaround for Neon
        LIBS="$LIBS -lm"                                                 # shameless workaround for SQLite
        export CFLAGS
        export CPPFLAGS
        export LDFLAGS
        export LIBS
        ${DEVTOOL_SRCDIR}/configure -v \
            --prefix="$prefix" \
            --mandir="$prefix/man" \
            --with-path-cfg="$prefix/etc/rpm" \
            --with-path-rpmpopt="$prefix/lib/rpm/rpmpopt:$prefix/etc/rpm/rpmpopt:~/.rpmpopt" \
            --with-path-macros="$prefix/lib/rpm/macros:$prefix/etc/rpm/macros:~/.rpmmacros" \
            --with-path-lib="$prefix/lib/rpm" \
            --with-path-locale="$prefix/share/rpm/locale" \
            --with-path-database="$prefix/var/rpm/db" \
            --with-path-sources="$prefix/var/rpm/src" \
            --with-bugreport="openpkg-users@openpkg.org" \
            --with-beecrypt="$base3rd/bin/$platform/beecrypt-${v_beecrypt}" \
            --with-lua="$base3rd/bin/$platform/lua-${v_lua}/src" \
            --with-file="$base3rd/bin/$platform/file-${v_file}" \
            --with-zlib="$base3rd/bin/$platform/zlib-${v_zlib}" \
            --with-bzip2="$base3rd/bin/$platform/bzip2-${v_bzip2}" \
            --with-neon="$base3rd/bin/$platform/neon-${v_neon}" \
            --with-popt="$base3rd/bin/$platform/popt-${v_popt}" \
            --with-sqlite="$base3rd/bin/$platform/sqlite-${v_sqlite}" \
            --with-db="$base3rd/bin/$platform/db-${v_db}/build_unix" \
            --without-db-rpc \
            --without-db-largefile \
            --with-db-tools-integrated \
            --with-db-mutex="UNIX/fcntl" \
            --without-pthreads \
            --without-libelf \
            --without-selinux \
            --without-perl \
            --without-python \
            --without-apidocs \
            --disable-build-intlibdep \
            --disable-build-extlibdep \
            --disable-build-lafiles \
            --enable-build-warnings \
            --enable-build-debug \
            --disable-build-lib64 \
            --disable-shared \
            --disable-rpath \
            --disable-nls
    }

    #   build RPM
    standalone_build () {
        make
    }

    #   install RPM
    standalone_install () {
        rm -rf $prefix
        make install
    }

    #   test RPM (trivially only)
    standalone_testdrive () {
        (   set -x
            $prefix/bin/rpm -vv --initdb || exit $?
            $prefix/bin/rpm -vv --import ${DEVTOOL_SRCDIR}/pubkeys/JBJ-GPG-KEY || exit $?
            $prefix/bin/rpm -vv -qa || exit $?
            $prefix/bin/rpm -vv -qi gpg-pubkey-2039b291-3dbaae72 || exit $?
            $prefix/bin/rpm -vv -e gpg-pubkey-2039b291-3dbaae72 || exit $?
            $prefix/bin/rpm -vv -Va || exit $?
        ) >/tmp/rpm.devtool.standalone.testdrive 2>&1
        if [ $? -ne 0 ]; then
            echo "devtool:standalone:testdrive:ERROR: trivial testsuite failed (trace follows):"
            cat /tmp/rpm.devtool.standalone.testdrive
        fi
        rm -f /tmp/rpm.devtool.standalone.testdrive
    }

    #   do all at once
    standalone_all () {
        standalone_prepare
        standalone_autogen
        standalone_configure
        standalone_build
        standalone_install
        standalone_testdrive
    }

%jasonc
    #   source reusable companion modules
    @source %standalone-modules
    #   execute implicit shared modules
    standalone_defines

    #    determine some local tools
    SHTOOL="`cd ${DEVTOOL_SRCDIR} && pwd`/devtool.shtool"
    cc="/usr/bin/gcc"
    grep="/usr/bin/grep"
    #   installation default prefix
    prefix="/usr/local"

    #   prepare build environment
    prepare () {
        PATH="$prefix/bin:$prefix/sbin:/bin:/sbin:/usr/bin:/usr/sbin"

        echo "++ establishing third-party area under ($prefix)"
        rm -rf $prefix/*
        for dir in "" bin etc src lib; do
            if [ ! -d "$prefix/$dir" ]; then
                mkdir $prefix/$dir || exit $?
            fi
        done

        echo "++ establishing third-party distribution files ($prefix/src/)"
        for spec in $dist; do
            file=`echo "$spec" | sed -e 's;,.*$;;'`
            urls=`echo "$spec" | sed -e 's;^[^,]*;;'`
            if [ ! -f "$prefix/src/$file" ]; then
                standalone_download "$prefix/src/$file" "$urls" || exit $?
            fi
        done

        #   GNU m4 (installed development tool)
        echo "++ building third-party development tool m4-${v_m4}"
        (   cd $prefix/src
            rm -rf m4-${v_m4}
            tar zxvf m4-${v_m4}.tar.gz
            (   cd m4-${v_m4}
                CC="$cc" \
                GREP="$grep" \
                ./configure \
                    --prefix="$prefix" \
                    --disable-nls
                make
                make install
                ln $prefix/bin/m4 \
                    $prefix/bin/gm4
            ) || exit $?
        ) || exit $?

        #   GNU autoconf (installed development tool)
        echo "++ building third-party development tool autoconf-${v_autoconf}"
        (   cd $prefix/src
            rm -rf autoconf-${v_autoconf}
            tar zxvf autoconf-${v_autoconf}.tar.gz
            (   cd autoconf-${v_autoconf}
                CC="$cc" \
                ACLOCAL="true" \
                AUTOMAKE="true" \
                AUTOCONF="true" \
                AUTOHEADER="true" \
                MAKEINFO="true" \
                GREP="$grep" \
                ./configure \
                    --prefix="$prefix"
                make
                make install
            ) || exit $?
        ) || exit $?

        #   GNU automake (installed development tool)
        echo "++ building third-party development tool automake-${v_automake}"
        (   cd $prefix/src
            rm -rf automake-${v_automake}
            tar zxvf automake-${v_automake}.tar.gz
            (   cd automake-${v_automake}
                patch -p0 < ../automake-${v_automake}.patch
                $SHTOOL subst \
                    -e "s;^\(.SUFFIXES: .*\) \.info \(.*\);\1 \2;" \
                    doc/Makefile.in
                CC="$cc" \
                ACLOCAL="true" \
                AUTOMAKE="true" \
                AUTOCONF="true" \
                AUTOHEADER="true" \
                MAKEINFO="true" \
                GREP="$grep" \
                ./configure \
                    --prefix="$prefix"
                make
                make install
            ) || exit $?
        ) || exit $?

        #   GNU libtool (installed development tool)
        echo "++ building third-party development tool libtool-${v_libtool}"
        (   cd $prefix/src
            rm -rf libtool-${v_libtool}
            tar zxvf libtool-${v_libtool}.tar.gz
            (   cd libtool-${v_libtool}
                $SHTOOL subst \
                    -e 's;grep ggrep;grep ggrep egrep;g' \
                    -e 's;-e .-(cannot match)-.;;g' \
                    `find . -name configure -print`
                CC="$cc" \
                GREP="$grep" \
                ./configure \
                    --prefix="$prefix" \
                    --enable-static \
                    --enable-shared
                make
                make install
                ln $prefix/bin/libtoolize \
                    $prefix/bin/glibtoolize
            ) || exit $?
        ) || exit $?

        #   GNU gettext (installed development tool)
        echo "++ building third-party development tool gettext-${v_gettext}"
        (   cd $prefix/src
            rm -rf gettext-${v_gettext}
            tar zxvf gettext-${v_gettext}.tar.gz
            (   cd gettext-${v_gettext}
                patch -p0 < ../gettext-${v_gettext}.patch
                $SHTOOL subst \
                    -e '/localcharset.\$lo/d' \
                    gettext-runtime/intl/Makefile.in
                $SHTOOL subst \
                    -e 's;\(SUBDIRS.*=.*\)intl-java ;\1;' \
                    -e 's;\(SUBDIRS.*=.*\)intl-csharp ;\1;' \
                    gettext-runtime/Makefile.in
                $SHTOOL subst \
                    -e 's;^.*intl-java/Makefile.*$;;' \
                    -e 's;^.*intl-csharp/Makefile.*$;;' \
                    gettext-runtime/configure
                $SHTOOL subst \
                    -e 's;@BUILDJAVA@;no;g' \
                    -e 's;@BUILDJAVAEXE@;no;g' \
                    -e 's;@BUILDCSHARP@;no;g' \
                    gettext-tools/src/Makefile.in
                $SHTOOL subst \
                    -e 's;^\(SUBDIRS =.*\)tests examples;\1;' \
                    gettext-tools/Makefile.in
                $SHTOOL subst \
                    -e 's;\#if USEJEXE;#ifdef USEJEXE;' \
                    gettext-tools/src/read-java.c \
                    gettext-tools/src/urlget.c
                CC="$cc" \
                GREP="$grep" \
                ./configure \
                    --prefix="$prefix" \
                    --without-libiconv-prefix \
                    --with-included-gettext \
                    --without-libexpat-prefix \
                    --disable-libasprintf \
                    --disable-threads \
                    --disable-csharp \
                    --disable-java \
                    --disable-nls \
                    --disable-shared
                make
                make install
            ) || exit $?
        ) || exit $?

        #   BZip2 (uninstalled third-party library)
        echo "++ building third-party library bzip2-${v_bzip2}"
        (   cd $prefix/src
            rm -rf bzip2-${v_bzip2}
            tar zxvf bzip2-${v_bzip2}.tar.gz
            (   cd bzip2-${v_bzip2}
                make CC="$cc" libbz2.a bzip2
            ) || exit $?
        ) || exit $?

        #   OpenSSL (uninstalled third-party library)
        echo "++ building third-party library openssl-${v_openssl}"
        (   cd $prefix/src
            rm -rf openssl-${v_openssl}
            tar zxvf openssl-${v_openssl}.tar.gz
            (   cd openssl-${v_openssl}
                patch -p0 < ../openssl-${v_openssl}.patch
                $SHTOOL subst \
                    -e 's;-m486;-march=i486;g' \
                    -e 's;BN_LLONG *;;' \
                    Configure
                $SHTOOL subst \
                    -e 's;test "$OSTYPE" = msdosdjgpp;true;' \
                    util/point.sh
                $SHTOOL subst \
                    -e "1s;^.*\$;#!$PERL;" \
                    Configure `find . -name "*.pl" -print`
                CC="$cc" \
                ./config \
                    --prefix=%{l_prefix} \
                    no-asm no-shared no-dso \
                    no-zlib no-idea no-threads no-krb5 no-hw
                make build_libs build_apps
                ( mkdir lib; cd lib; ln -s ../lib*.a . )
            ) || exit $?
        ) || exit $?

        #   Expat (uninstalled third-party library)
        echo "++ building third-party library expat-${v_expat}"
        (   cd $prefix/src
            rm -rf expat-${v_expat}
            tar zxvf expat-${v_expat}.tar.gz
            (   cd expat-${v_expat}
                CC="$cc" \
                ./configure \
                    --disable-shared
                make libexpat.la
            ) || exit $?
        ) || exit $?

        #   Neon (uninstalled third-party library)
        echo "++ building third-party library neon-${v_neon}"
        (   cd $prefix/src
            rm -rf neon-${v_neon}
            tar zxvf neon-${v_neon}.tar.gz
            (   cd neon-${v_neon}
                ( echo "ac_cv_path_KRB5_CONFIG=" ) >config.cache
                CC="$cc" \
                CPPFLAGS="-I$prefix/src/openssl-${v_openssl}/include -I$prefix/src/zlib-${v_zlib} -I$prefix/src/expat-${v_expat}/lib" \
                LDFLAGS="-L$prefix/src/openssl-${v_openssl}/lib -L$prefix/src/expat-${v_expat}/lib -L$prefix/src/expat-${v_expat}/.libs" \
                ./configure \
                    --cache-file="./config.cache" \
                    --with-ssl="openssl" \
                    --without-libxml2 \
                    --with-expat \
                    --enable-webdav \
                    --disable-nls \
                    --disable-shared \
                    --enable-static
                make
                ( cd src; ln -s . neon )
            ) || exit $?
        ) || exit $?

        #   BeeCrypt (uninstalled third-party library)
        echo "++ building third-party library beecrypt-${v_beecrypt}"
        (   cd $prefix/src
            rm -rf beecrypt-${v_beecrypt}
            tar zxvf beecrypt-${v_beecrypt}.tar.gz
            (   cd beecrypt-${v_beecrypt}
                patch -p0 < ../beecrypt-${v_beecrypt}.patch
                cp ../config.guess-${v_config} config.guess
                cp ../config.sub-${v_config} config.sub
                $SHTOOL subst \
                    -e 's;^[ 	][ 	]*#;#;' \
                    aes.c base64.c blowfish.c entropy.c fips186.c fips186.h \
                    md5.c md5.h mp.c mtprng.c mtprng.h sha1.c sha1.h sha256.c \
                    sha256.h timestamp.c
                $SHTOOL subst \
                    -e 's;cppglue\.lo;;g' \
                    -e 's;cppglue\.cxx;;g' \
                    -e '/^CXX = /s;@CXX@;@CC@;g' \
                    Makefile.in
                $SHTOOL subst \
                    -e '/LINENO: error: C[+]* preprocessor/{N;N;N;N;s/.*/:/;}' \
                    configure
                ( echo 'ac_cv_have_dev_dsp=no'
                  echo 'ac_cv_have_dev_audio=no'
                  echo 'ac_cv_func_gettimeofday=yes'
                  echo 'bc_cv_as_noexecstack=no'
                ) >config.cache
                CC="$cc" \
                ./configure \
                    --without-cplusplus \
                    --without-java \
                    --without-python \
                    --with-cpu="none" \
                    --with-arch="none" \
                    --disable-threads \
                    --disable-shared
                make
            ) || exit $?
        ) || exit $?

        #   SQLite (uninstalled third-party library)
        echo "++ building third-party library sqlite-${v_sqlite}"
        (   cd $prefix/src
            rm -rf sqlite-${v_sqlite}
            tar zxvf sqlite-${v_sqlite}.tar.gz
            (   cd sqlite-${v_sqlite}
                patch -p0 < ../sqlite-${v_sqlite}.patch
                CC="$cc" \
                CFLAGS="-DNDEBUG=1" \
                LIBS="-lm" \
                ./configure \
                    --disable-utf8 \
                    --disable-readline \
                    --disable-threadsafe \
                    --disable-shared
                make
            ) || exit $?
        ) || exit $?

        #   POPT (uninstalled third-party library)
        echo "++ building third-party library popt-${v_popt}"
        (   cd $prefix/src
            rm -rf popt-${v_popt}
            tar zxvf popt-${v_popt}.tar.gz
            (   cd popt-${v_popt}
                patch -p0 < ../popt-${v_popt}.patch
                CC="$cc" \
                ./configure \
                    --disable-shared \
                    --disable-nls
                make
            ) || exit $?
        ) || exit $?
    }

    #   configure build environment
    configure () {
        echo "++ cleaning up build environment"
        ( cd ${DEVTOOL_SRCDIR}; make distclean || true ) >/dev/null 2>&1

        echo "++ configuring build environment"
        CFLAGS=""
        CPPFLAGS=""
        LDFLAGS=""
        LIBS=""
        LDFLAGS="$LDFLAGS -L$prefix/src/openssl-${v_openssl}" # shameless workaround for Neon
        LIBS="$LIBS -lssl -lcrypto" # shameless workaround for Neon
        LIBS="$LIBS -lm" # shameless workaround for SQLite
        export CFLAGS
        export CPPFLAGS
        export LDFLAGS
        export LIBS
        ${DEVTOOL_SRCDIR}/configure -v \
            --prefix="$prefix" \
            --mandir="$prefix/man" \
            --with-path-cfg="$prefix/etc/rpm" \
            --with-path-rpmpopt="$prefix/lib/rpm/rpmpopt:$prefix/etc/rpm/rpmpopt:~/.rpmpopt" \
            --with-path-macros="$prefix/lib/rpm/macros:$prefix/etc/rpm/macros:~/.rpmmacros" \
            --with-path-lib="$prefix/lib/rpm" \
            --with-path-locale="$prefix/share/rpm/locale" \
            --with-path-database="$prefix/var/rpm/db" \
            --with-path-sources="$prefix/var/rpm/src" \
            --with-beecrypt="$prefix/src/beecrypt-${v_beecrypt}" \
            --with-bzip2="$prefix/src/bzip2-${v_bzip2}" \
            --with-neon="$prefix/src/neon-${v_neon}" \
            --with-popt="$prefix/src/popt-${v_popt}" \
            --with-sqlite="$prefix/src/sqlite-${v_sqlite}" \
            --with-db="internal" \
            --with-lua="internal" \
            --with-file="internal" \
            --with-zlib="internal" \
            --without-db-rpc \
            --with-db-mutex="UNIX/fcntl" \
            --without-pthreads \
            --with-libelf="internal" \
            --without-selinux \
            --with-perl \
            --with-python="2.3" \
            --with-python-inc-dir="/System/Library/Frameworks/Python.framework/Versions/2.3/include/python2.3" \
            --with-python-lib-dir="/System/Library/Frameworks/Python.framework/Versions/2.3/lib/python2.3" \
            --without-apidocs \
            --disable-build-intlibdep \
            --disable-build-extlibdep \
            --disable-build-lafiles \
            --enable-build-warnings \
            --enable-build-debug \
            --disable-build-lib64 \
            --disable-shared \
            --disable-rpath \
            --disable-nls
    }

    #   build RPM
    build () {
        make
    }

    #   install RPM
    install () {
        make install
    }

    #   test RPM (trivially only)
    testdrive () {
        $prefix/bin/rpm --initdb
        $prefix/bin/rpm --import ${DEVTOOL_SRCDIR}/pubkeys/JBJ-GPG-KEY
        $prefix/bin/rpm -qa
        $prefix/bin/rpm -Va
    }

    #   do all at once
    all () {
        prepare
        standalone_autogen
        configure
        build
        install
        testdrive
    }

    #   dispatch command
    if [ $# -eq 0 ]; then
        set -- all
    fi
    ( eval ${1+"$@"} ) 2>&1

%afb
    %universal

%panther
    UNIVERSAL_CC="gcc-3.3"; export PATH="$PATH:/usr/libexec/gcc/darwin/ppc/3.3" # horrible Intel workaround
    UNIVERSAL_SDK="/Developer/SDKs/MacOSX10.3.9.sdk"
    UNIVERSAL_CPPFLAGS="-I${UNIVERSAL_SDK}/usr/include"
    UNIVERSAL_CFLAGS="-isystem ${UNIVERSAL_SDK}/usr/include -isystem ${UNIVERSAL_SDK}/usr/include/gcc/darwin/3.3 -arch ppc"
    UNIVERSAL_LDFLAGS="-Wl,-syslibroot,${UNIVERSAL_SDK} -arch ppc"
    UNIVERSAL_TARGET="--host powerpc-apple-darwin7 --target powerpc-apple-darwin7"
    @source %macosx

%universal
    UNIVERSAL_CC="gcc-4.0"
    UNIVERSAL_SDK="/Developer/SDKs/MacOSX10.4u.sdk"
    UNIVERSAL_CPPFLAGS=""
    UNIVERSAL_CFLAGS="-isysroot ${UNIVERSAL_SDK} -arch ppc -arch i386"
    UNIVERSAL_LDFLAGS="-arch ppc -arch i386"
    UNIVERSAL_TARGET=""
    @source %macosx

%macosx
    ##
    ##  Builds a Universal Binary (ppc/i386), on the Mac OS X 10.4 platform.
    ##  (this target is heavilly inspired by the OpenPKG "standalone" target)
    ##
    ##  Written by Anders F Bjorklund in memoriam of the rpm4darwin project
    ##  which provided the legacy RPM 4.0 to 4.3, for Mac OS X 10.1 to 10.4
    ##  It can also be used if you want access to the RPM tools or libraries
    ##  from RPM, without having to install all requirements from MacPorts.
    ##
    ##  These tools are built local: m4, autoconf, automake, libtool, gettext
    ##  (the system-provided versions are too old, and thus cannot be used...)
    ##  Note: "libtool" is called "glibtool" on the Darwin platform, due to a
    ##  name conflict with the system linker which is also called libtool(1)
    ##
    ##  Shipped programs/libraries are built as Universal Binaries (i.e. fat)
    ##  with: -isysroot /Developer/SDKs/MacOSX10.4u.sdk -arch ppc -arch i386
    ##  This also requires --disable-dependency-tracking, since it doesn't
    ##  work with multiple -arch flags (see Apple's Technical Note TN2137)
    ##
    ##  These libraries are statically built internally: db, lua, zlib, file
    ##  These libraries are statically linked: neon, beecrypt, sqlite, popt
    ##  (building popt statically requires that the required popt.h header
    ##  is included within the rpm headers, so that it can be found later)
    ##
    ##  The package is configured to install in /usr/local and /var/local,
    ##  with the RPM configuration files in /etc. RPM libraries are dynamic.
    ##  The Perl module for RPM is included, built in /Library/Perl/5.8.6/
    ##  The Python module for RPM is included, built in /Library/Python/2.3/
    ##

    @source %standalone-modules
    standalone_defines

    #    determine some local tools
    SHTOOL="`cd ${DEVTOOL_SRCDIR} && pwd`/devtool.shtool"
    test ".$UNIVERSAL_CC" == "." && UNIVERSAL_CC="gcc"

    #   third-party base directory
    basemac="${DEVTOOL_SRCDIR}/../mac"

    #   prepare build environment
    prepare () {
        echo "++ establishing third-party area under ($basemac)"
        for dir in "" src bin run; do
            if [ ! -d "$basemac/$dir" ]; then
                mkdir $basemac/$dir || exit $?
            fi
        done

        echo "++ establishing third-party distribution files ($basemac/src/)"
        for spec in $dist; do
            file=`echo "$spec" | sed -e 's;,.*$;;'`
            urls=`echo "$spec" | sed -e 's;^[^,]*;;'`
            if [ ! -f "$basemac/src/$file" ]; then
                standalone_download "$basemac/src/$file" "$urls" || exit $?
            fi
        done

        #   extend environment
        prefix_tools="`cd $basemac/run && pwd`"
        PATH="$prefix_tools/bin:$prefix_tools/sbin:$PATH"
        PATH="$PATH:/bin:/usr/bin:/sbin:/usr/sbin"
        export PATH

        #   GNU m4 (installed development tool)
        if [ ! -d "$basemac/bin/m4-${v_m4}" ]; then
            echo "++ building third-party development tool m4-${v_m4}"
            (   cd $basemac/bin
                rm -rf m4-${v_m4}
                gzip -d -c ../src/m4-${v_m4}.tar.gz | gnutar xf -
                (   cd m4-${v_m4}
                    CC="cc" \
                    GREP="grep" \
                    ./configure \
                        --prefix="$prefix_tools" \
                        --disable-nls
                    make
                    make install
                    rm -f $prefix_tools/bin/gm4
                    ln $prefix_tools/bin/m4 \
                       $prefix_tools/bin/gm4
                ) || exit $?
            ) || exit $?
        fi

        #   GNU autoconf (installed development tool)
        if [ ! -d "$basemac/bin/autoconf-${v_autoconf}" ]; then
            echo "++ building third-party development tool autoconf-${v_autoconf}"
            (   cd $basemac/bin
                rm -rf autoconf-${v_autoconf}
                gzip -d -c ../src/autoconf-${v_autoconf}.tar.gz | gnutar xf -
                (   cd autoconf-${v_autoconf}
                    CC="cc" \
                    ACLOCAL=true \
                    AUTOMAKE=true \
                    AUTOCONF=true \
                    AUTOHEADER=true \
                    MAKEINFO=true \
                    GREP=grep \
                    ./configure \
                        --prefix="$prefix_tools"
                    make
                    make install
                ) || exit $?
            ) || exit $?
        fi

        #   GNU automake (installed development tool)
        if [ ! -d "$basemac/bin/automake-${v_automake}" ]; then
            echo "++ building third-party development tool automake-${v_automake}"
            (   cd $basemac/bin
                rm -rf automake-${v_automake}
                gzip -d -c ../src/automake-${v_automake}.tar.gz | gnutar xf -
                (   cd automake-${v_automake}
                    patch -p0 <../../src/automake-${v_automake}.patch
                    $SHTOOL subst \
                        -e "s;^\(.SUFFIXES: .*\) \.info \(.*\);\1 \2;" \
                        doc/Makefile.in
                    CC="cc" \
                    ACLOCAL=true \
                    AUTOMAKE=true \
                    AUTOCONF=true \
                    AUTOHEADER=true \
                    MAKEINFO=true \
                    GREP=grep \
                    ./configure \
                        --prefix="$prefix_tools"
                    make
                    make install
                ) || exit $?
            ) || exit $?
        fi

        #   GNU libtool (installed development tool)
        if [ ! -d "$basemac/bin/libtool-${v_libtool}" ]; then
            echo "++ building third-party development tool libtool-${v_libtool}"
            (   cd $basemac/bin
                rm -rf libtool-${v_libtool}
                gzip -d -c ../src/libtool-${v_libtool}.tar.gz | gnutar xf -
                (   cd libtool-${v_libtool}
                    $SHTOOL subst \
                        -e 's;grep ggrep;grep ggrep egrep;g' \
                        -e 's;-e .-(cannot match)-.;;g' \
                        `find . -name configure -print`
                    CC="cc" \
                    GREP=grep \
                    ./configure \
                        --prefix="$prefix_tools" \
                        --program-prefix="g" \
                        --enable-static \
                        --enable-shared
                    make
                    make install
                ) || exit $?
            ) || exit $?
        fi

        #   GNU gettext (installed development tool)
        if [ ! -d "$basemac/bin/gettext-${v_gettext}" ]; then
            echo "++ building third-party development tool gettext-${v_gettext}"
            (   cd $basemac/bin
                rm -rf gettext-${v_gettext}
                gzip -d -c ../src/gettext-${v_gettext}.tar.gz | gnutar xf -
                (   cd gettext-${v_gettext}
                    patch -p0 <../../src/gettext-${v_gettext}.patch
                    $SHTOOL subst \
                        -e '/localcharset.\$lo/d' \
                        gettext-runtime/intl/Makefile.in
                    $SHTOOL subst \
                        -e 's;\(SUBDIRS.*=.*\)intl-java ;\1;' \
                        -e 's;\(SUBDIRS.*=.*\)intl-csharp ;\1;' \
                         gettext-runtime/Makefile.in
                    $SHTOOL subst \
                        -e 's;^.*intl-java/Makefile.*$;;' \
                        -e 's;^.*intl-csharp/Makefile.*$;;' \
                        gettext-runtime/configure
                    $SHTOOL subst \
                        -e 's;@BUILDJAVA@;no;g' \
                        -e 's;@BUILDJAVAEXE@;no;g' \
                        -e 's;@BUILDCSHARP@;no;g' \
                        gettext-tools/src/Makefile.in
                    $SHTOOL subst \
                        -e 's;^\(SUBDIRS =.*\)tests examples;\1;' \
                        gettext-tools/Makefile.in
                    $SHTOOL subst \
                        -e 's;\#if USEJEXE;#ifdef USEJEXE;' \
                        gettext-tools/src/read-java.c \
                        gettext-tools/src/urlget.c
                    CC="cc" \
                    GREP="grep" \
                    ./configure \
                        --prefix="$prefix_tools" \
                        --without-libiconv-prefix \
                        --with-included-gettext \
                        --without-libexpat-prefix \
                        --disable-libasprintf \
                        --disable-threads \
                        --disable-csharp \
                        --disable-java \
                        --disable-nls \
                        --disable-shared
                    make
                    make install
                ) || exit $?
            ) || exit $?
        fi

        #   universal binaries

        #   Expat (uninstalled third-party library)
        if [ ! -d "$basemac/bin/expat-${v_expat}" ]; then
            echo "++ building third-party library expat-${v_expat}"
            (   cd $basemac/bin
                rm -rf expat-${v_expat}
                gzip -d -c ../src/expat-${v_expat}.tar.gz | gnutar xf -
                (   cd expat-${v_expat}
                    CC="$UNIVERSAL_CC" \
                    CPPFLAGS="$UNIVERSAL_CPPFLAGS" \
                    CFLAGS="-O2 -g $UNIVERSAL_CFLAGS" \
                    LDFLAGS="$UNIVERSAL_LDFLAGS" \
                    ./configure $UNIVERSAL_TARGET \
                        --disable-shared
                    make libexpat.la
                ) || exit $?
            ) || exit $?
        fi

        #   Neon (uninstalled third-party library)
        if [ ! -d "$basemac/bin/neon-${v_neon}" ]; then
            echo "++ building third-party library neon-${v_neon}"
            (   cd $basemac/bin
                rm -rf neon-${v_neon}
                gzip -d -c ../src/neon-${v_neon}.tar.gz | gnutar xf -
                (   cd neon-${v_neon}
                    ( echo "ac_cv_path_KRB5_CONFIG="
                    ) >config.cache
                    CC="$UNIVERSAL_CC" \
                    CPPFLAGS="$UNIVERSAL_CPPFLAGS" \
                    CPPFLAGS="-I`pwd`/../expat-${v_expat}/lib" \
                    CFLAGS="-O2 -g $UNIVERSAL_CFLAGS" \
                    LDFLAGS="-L`pwd`/../expat-${v_expat}/lib -L`pwd`/../expat-${v_expat}/.libs $UNIVERSAL_LDFLAGS" \
                    ./configure $UNIVERSAL_TARGET \
                        --cache-file=./config.cache \
                        --with-libs=/tmp \
                        --with-ssl=openssl \
                        --without-libxml2 \
                        --with-expat \
                        --enable-webdav \
                        --disable-nls \
                        --disable-shared \
                        --enable-static
                    make
                    ( cd src; ln -s . neon )
                ) || exit $?
            ) || exit $?
        fi

        #   BeeCrypt (uninstalled third-party library)
        if [ ! -d "$basemac/bin/beecrypt-${v_beecrypt}" ]; then
            echo "++ building third-party library beecrypt-${v_beecrypt}"
            (   cd $basemac/bin
                rm -rf beecrypt-${v_beecrypt}
                gzip -d -c ../src/beecrypt-${v_beecrypt}.tar.gz | gnutar xf -
                (   cd beecrypt-${v_beecrypt}
                    patch -p0 <../../src/beecrypt-${v_beecrypt}.patch
                    cp ../../src/config.guess-${v_config} config.guess
                    cp ../../src/config.sub-${v_config} config.sub
                    $SHTOOL subst \
                        -e 's;^[ 	][ 	]*#;#;' \
                        aes.c base64.c blowfish.c entropy.c fips186.c fips186.h md5.c \
                        md5.h mp.c mtprng.c mtprng.h sha1.c sha1.h sha256.c sha256.h timestamp.c
                    $SHTOOL subst \
                       -e 's;cppglue\.lo;;g' \
                       -e 's;cppglue\.cxx;;g' \
                       -e '/^CXX = /s;@CXX@;@CC@;g' \
                       Makefile.in
                    $SHTOOL subst \
                        -e '/LINENO: error: C[+]* preprocessor/{N;N;N;N;s/.*/:/;}' \
                        configure
                    ( echo 'ac_cv_have_dev_dsp=no'
                      echo 'ac_cv_have_dev_audio=no'
                      echo 'ac_cv_func_gettimeofday=yes'
                      echo 'bc_cv_as_noexecstack=no'
                    ) >config.cache
                    CC="$UNIVERSAL_CC" \
                    CPPFLAGS="$UNIVERSAL_CPPFLAGS" \
                    CFLAGS="-O2 -g $UNIVERSAL_CFLAGS" \
                    LDFLAGS="$UNIVERSAL_LDFLAGS" \
                    ./configure $UNIVERSAL_TARGET \
                        --without-cplusplus \
                        --without-java \
                        --without-python \
                        --with-cpu=none \
                        --with-arch=none \
                        --disable-threads \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   SQLite (uninstalled third-party library)
        if [ ! -d "$basemac/bin/sqlite-${v_sqlite}" ]; then
            echo "++ building third-party library sqlite-${v_sqlite}"
            (   cd $basemac/bin
                rm -rf sqlite-${v_sqlite}
                gzip -d -c ../src/sqlite-${v_sqlite}.tar.gz | gnutar xf -
                (   cd sqlite-${v_sqlite}
                    patch -p0 <../../src/sqlite-${v_sqlite}.patch
                    CC="$UNIVERSAL_CC" \
                    CPPFLAGS="$UNIVERSAL_CPPFLAGS" \
                    CFLAGS="-O2 -g $UNIVERSAL_CFLAGS" \
                    LDFLAGS="$UNIVERSAL_LDFLAGS" \
                    ./configure $UNIVERSAL_TARGET \
                        --disable-utf8 \
                        --disable-readline \
                        --disable-threadsafe \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   POPT (uninstalled third-party library)
        if [ ! -d "$basemac/bin/popt-${v_popt}" ]; then
            echo "++ building third-party library popt-${v_popt}"
            (   cd $basemac/bin
                rm -rf popt-${v_popt}
                gzip -d -c ../src/popt-${v_popt}.tar.gz | gnutar xf -
                (   cd popt-${v_popt}
                    patch -p0 <../../src/popt-${v_popt}.patch
                    CC="$UNIVERSAL_CC" \
                    CPPFLAGS="$UNIVERSAL_CPPFLAGS" \
                    CFLAGS="-O2 -g $UNIVERSAL_CFLAGS" \
                    LDFLAGS="$UNIVERSAL_LDFLAGS" \
                    ./configure $UNIVERSAL_TARGET \
                        --disable-dependency-tracking \
                        --disable-shared \
                        --disable-nls
                    make
                ) || exit $?
            ) || exit $?
        fi
    }

    #   configure build environment
    configure () {
        echo "++ cleaning up build environment"
        ( cd ${DEVTOOL_SRCDIR}; make distclean || true ) >/dev/null 2>&1
        ( cd ${DEVTOOL_SRCDIR}/xar; make distclean || true ) >/dev/null 2>&1

        echo "++ configuring build environment"
        basemac="`cd $basemac && pwd`"
        CC="$UNIVERSAL_CC"
        CPPFLAGS="$UNIVERSAL_CPPFLAGS"
        CFLAGS="-O2 -g $UNIVERSAL_CFLAGS"
        LDFLAGS="$UNIVERSAL_LDFLAGS -Wl,-search_paths_first" # static
        LIBS="$LIBS -lssl -lcrypto" # shameless workaround for Neon
        CPPFLAGS="$CPPFLAGS -I/tmp/xar-root/usr/local/include"
        LDFLAGS="$LDFLAGS -L/tmp/xar-root/usr/local/lib"
        export CC
        export CPPFLAGS
        export CFLAGS
        export LDFLAGS
        export LIBS
        ${DEVTOOL_SRCDIR}/configure $UNIVERSAL_TARGET -v \
            --prefix=/usr/local \
            --sysconfdir=/private/etc \
            --localstatedir=/private/var/local \
            --mandir=/usr/local/share/man \
            --infodir=/usr/local/share/info \
            --disable-dependency-tracking \
            --disable-aio \
            --with-glob \
            --enable-broken-chown \
            --with-dbapi=sqlite \
            --with-bugreport="afb@rpm5.org" \
            --with-db=internal \
            --with-lua=internal \
            --with-zlib=internal \
            --with-file=internal \
            --with-neon="$basemac/bin/neon-${v_neon}" \
            --with-beecrypt="$basemac/bin/beecrypt-${v_beecrypt}" \
            --with-sqlite="$basemac/bin/sqlite-${v_sqlite}" \
            --with-popt="$basemac/bin/popt-${v_popt}" \
            --with-perl \
            --with-python \
            --without-apidocs \
            --disable-static \
            --enable-shared \
            --disable-rpath \
            --disable-nls

        #   XAR (uninstalled internal library)
        if [ -d "${DEVTOOL_SRCDIR}/xar" ]; then
            (   mkdir -p xar; cd xar
                (   CC="$UNIVERSAL_CC" \
                    CPPFLAGS="$UNIVERSAL_CPPFLAGS" \
                    CFLAGS="-O2 -g $UNIVERSAL_CFLAGS" \
                    LDFLAGS="$UNIVERSAL_LDFLAGS" \
                    echo "=== configuring in xar (`pwd`)"
                    ${DEVTOOL_SRCDIR}/xar/configure $UNIVERSAL_TARGET \
                        --prefix=/usr/local \
                        --disable-shared
                ) || exit $?
            ) || exit $?
        fi
    }

    #   do all at once
    prepare
    #%checkout
    %checkout xar
    %autogen
    ( cd ${DEVTOOL_SRCDIR}/xar && sh autogen.sh )
    configure
    gnumake

    # build xar into a temporary destroot, then build txar
    gnumake -C xar all install DESTDIR=/tmp/xar-root
    perl -pe 's,-lxar,/tmp/xar-root/usr/local/lib/libxar.la,' -i tools/Makefile
    gnumake -C tools txar

    # perl's MakeMaker ignores our -search_paths_first, and links with system libs :-(
    make -C perl LD="ld -search_paths_first" MACOSX_DEPLOYMENT_TARGET="10.3" clean all

    # python complains about missing symbols from "expat" when using librpmio, relink:
    make -C rpmio LIBS="-lsqlite3 -lpopt -lneon -lexpat -lbeecrypt    $LIBS" clean all

    # install into a temporary destroot, instead of to system
    rm -rf /tmp/rpm-root
    mkdir -p /tmp/rpm-root/private/etc/rpm
    mkdir -p /tmp/rpm-root/private/var/local/tmp
    chmod 1777 /tmp/rpm-root/private/var/local/tmp
    ln -s private/etc /tmp/rpm-root/etc
    ln -s private/var /tmp/rpm-root/var
    gnumake install DESTDIR=/tmp/rpm-root
    rm /tmp/rpm-root/etc
    rm /tmp/rpm-root/var

    # remove the "TR" directory, and use "var/spool/repackage"
    sed -i -e 's,%{_topdir}/TR,%{_var}/spool/repackage,' /tmp/rpm-root/usr/local/lib/rpm/macros
    test -d /tmp/rpm-root/usr/local/src/rpm/TR && rmdir /tmp/rpm-root/usr/local/src/rpm/TR
    mkdir -p /tmp/rpm-root/private/var/local/spool/repackage

    # remove generated/conflicting perl module files and lists
    rm /tmp/rpm-root/System/Library/Perl/*/darwin-thread-multi-2level/perllocal.pod
    rm /tmp/rpm-root/Library/Perl/*/darwin-thread-multi-2level/auto/RPM/.packlist
    
    # move perl/python modules to canonical /Library locations
    python_version=`( grep ^WITH_PYTHON_VERSION config.log; echo 'echo $WITH_PYTHON_VERSION' ) | sh`
    mkdir -p /tmp/rpm-root/Library/Python/$python_version
    mv /tmp/rpm-root/Library/Frameworks/Python.framework/Versions/* \
       /tmp/rpm-root/Library/Python/
    rm -r /tmp/rpm-root/Library/Frameworks
    mv /tmp/rpm-root/Library/Python/*/lib/python*/site-packages \
       /tmp/rpm-root/Library/Python/*/
    rm -r /tmp/rpm-root/Library/Python/*/lib
    mv /tmp/rpm-root/usr/local/lib/python*/site-packages/rpm/*.py \
       /tmp/rpm-root/Library/Python/*/site-packages/rpm
    rm -r /tmp/rpm-root/usr/local/lib/python*
    mv /tmp/rpm-root/usr/lib/python*/site-packages/rpm/*.py \
       /tmp/rpm-root/Library/Python/*/site-packages/rpm
    rm -r /tmp/rpm-root/usr/lib
    rm -r /tmp/rpm-root/System
    rm -r /tmp/rpm-root/Developer
    chmod 1775 /tmp/rpm-root/Library
    
    # setup default (undetected) configuration, for Mac OS X
    sed -i -e "s,${UNIVERSAL_CC},gcc," /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e 's,-gnu$,%{nil},' /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e 's,libtoolize$,glibtoolize,' /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e 's,%{_usr}/doc,%{_usr}/share/doc,' /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e 's,%{_prefix}/etc,/etc,' /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e 's,%{_prefix}/var,/var/local,' /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e 's,%{_prefix}/man,%{_prefix}/share/man,' /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e 's,%{_prefix}/info,%{_prefix}/share/info,' /tmp/rpm-root/usr/local/lib/rpm/macros
    rmdir /tmp/rpm-root/usr/local/src/rpm/RPMS/athlon
    rmdir /tmp/rpm-root/usr/local/src/rpm/RPMS/i486
    mkdir -p /tmp/rpm-root/usr/local/src/rpm/RPMS/ppc
    mkdir -p /tmp/rpm-root/usr/local/src/rpm/RPMS/ppc64

    # copy required popt.h library header to internal headers
    cp -p "$basemac/bin/popt-${v_popt}/popt.h" /tmp/rpm-root/usr/local/include/rpm

    # copy the internal txar tool over, for testing purposes
    cp -p tools/.libs/txar /tmp/rpm-root/usr/local/lib/rpm
    strip -S /tmp/rpm-root/usr/local/lib/rpm/txar

    # strip debugging symbols, and remove libtool files (.la)
    strip -S /tmp/rpm-root/usr/local/bin/*
    strip -S /tmp/rpm-root/usr/local/lib/rpm/db_*
    strip -S /tmp/rpm-root/usr/local/lib/*.dylib
    rm -f /tmp/rpm-root/usr/local/lib/*.la
    
    # test drive (version only, should set up a local dbpath)
    DYLD_LIBRARY_PATH=/tmp/rpm-root/usr/local/lib:$DYLD_LIBRARY_PATH /tmp/rpm-root/usr/local/bin/rpm --version

%tarball
    %checkout
    %autogen
    %configure
    make dist

