##
##  devtool.conf -- Development Tool Configuration for RPM 5
##

%common
    MODULE_NAMES="db lua file xar xz pcre syck"
    MODULE_TAG_DB=""
    MODULE_TAG_LUA=""
    MODULE_TAG_FILE=""
    MODULE_TAG_XAR=""
    MODULE_TAG_XZ=""
    MODULE_TAG_PCRE=""
    MODULE_TAG_SYCK=""

%checkout
    for name in $MODULE_NAMES "$@"; do
        release=MODULE_TAG_`echo ${name} | tr '[a-z]' '[A-Z]'`
        release=`eval echo \\$${release}`
        if [ ".${release}" = . ]; then
            if [ -d ${DEVTOOL_SRCDIR}/${name}/CVS ]; then
                echo "===> ${name} (cvs up HEAD)"
                ( cd ${DEVTOOL_SRCDIR}/${name} && cvs -q up -A -P -d )
            else
                echo "===> ${name} (cvs co HEAD)"
                ( cd ${DEVTOOL_SRCDIR} && cvs co -A -d ${name} ${name} )
            fi
        else
            if [ -d ${DEVTOOL_SRCDIR}/${name}/CVS ]; then
                echo "===> ${name} (cvs up ${release})"
                ( cd ${DEVTOOL_SRCDIR}/${name} && cvs -q up -P -d -r${release} )
            else
                echo "===> ${name} (cvs co ${release})"
                ( cd ${DEVTOOL_SRCDIR} && cvs co -r${release} -d ${name} ${name} )
            fi
        fi
        echo "<=== ${name}"
    done

%autogen
    ( cd ${DEVTOOL_SRCDIR} && sh autogen.sh )

%configure
    ${DEVTOOL_SRCDIR}/configure \
        --verbose \
        "$@"

%make
    #   intentionally just a pass-through target
    #   (important for use with devtool.bashrc)
    make "$@"

%prepare
    %checkout
    %autogen
    %configure "$@"

%jbj
    %checkout
    %system

%system
    #   configure RPM 5 with maximum internal (independence) and maximum
    #   external (reusability) extend as it usually is the case when
    #   building and running RPM as the system package manager on a
    #   Linux-based system like Fedora. This requires both the latest
    #   development tools and the third-party libraries to be installed
    #   in system locations.
    %autogen
    %configure \
        --verbose \
        --prefix=/usr \
        --with-db=internal \
        --with-db-tools-integrated \
        --with-zlib=external \
        --with-bzip2=external \
        --with-xz=internal \
        --with-file=internal \
        --with-lua=internal \
        --with-sqlite=external \
        --with-syck=internal \
        --with-beecrypt=external \
        --with-openssl=external \
        --with-nss=external \
        --with-gcrypt=external \
        --with-neon=external \
        --with-pcre=internal \
        --with-uuid=external \
        --with-xar=internal \
        --with-popt=external \
        --with-keyutils=external \
        --with-pthreads \
        --with-libelf \
        --with-selinux \
        --with-python \
        --with-perl \
        --with-build-extlibdep \
        --with-build-maxextlibdep \
        --enable-build-pic \
        --enable-build-versionscript \
        --enable-build-warnings \
        --enable-build-debug \
        --enable-maintainer-mode

# CC=ccache env UMASK=022 distcc cc
# CFLAGS=-O2 -g -m32 -march=pentium-mmx -fasynchronous-unwind-tables -I/usr/include/python2.5 -I/usr/include/beecrypt
# CXX=ccache env UMASK=022 distcc g++
# CXXFLAGS=-O2 -g -m32 -march=pentium-mmx -fasynchronous-unwind-tables
# --with-path-lib=\"/usr/lib/rpm\"
%wildpikachu
    %checkout
    %autogen
    %configure \
	--prefix=/usr \
	--sysconfdir=/etc \
	--localstatedir=/var \
	--infodir=/usr/share/info \
	--mandir=/usr/share/man \
	--libdir=/usr/lib \
	--without-selinux \
	--disable-dependency-tracking \
	--with-perl \
	--with-python \
	--with-sqlite \
	--with-pcre \
	--with-bzip2 \
	--with-openssl \
	--with-file \
	--with-libelf \
	--disable-rpath \
	--without-lua

%fray-cross
    %checkout
    %autogen
    %configure \
        --disable-nls \
        --with-libelf \
        --without-selinux \
        --without-perl \
        --with-python=2.4 \
        --with-zlib \
        --with-bzip2 \
        --with-beecrypt \
        --without-neon \
        --with-file=internal \
        --with-popt \
        --with-sqlite \
        --with-dbapi=sqlite \
        --with-db=internal \
        --with-lua=internal \
        --without-apidocs \
        --with-path-macros=... \
        --with-bugreport=support@windriver.com

%fray-target
    %checkout
    %autogen
    %configure \
        --disable-nls \
        --with-file=internal \
        --with-db=internal \
        --with-lua=internal \
        --without-apidocs \
        --with-beecrypt \
        --with-popt \
        --with-bugreport=support@windriver.com

%windriver-host
    RPM_VENDOR_WINDRIVER=1
    export RPM_VENDOR_WINDRIVER
    %checkout
    %autogen
    %configure \
        --prefix=/usr \
        --with-path-lib=/usr/lib/rpm \
        --with-python-lib-dir=/usr/lib/python2.5 \
        --disable-nls \
        --disable-rpath \
        --with-libelf \
        --without-selinux \
        --without-perl \
        --with-python=2.5 \
        --with-zlib=external \
        --with-bzip2=external \
        --with-beecrypt=external \
        --without-neon \
        --with-file=internal \
        --with-popt=external \
        --with-sqlite=external \
        --with-dbapi=sqlite \
        --with-db=internal \
        --with-lua=internal \
        --without-apidocs \
        --with-path-macros='%{_usrlibrpm}/macros:%{_usrlibrpm}/wrs/macros:%{_usrlibrpm}/wrs/%{_target}/macros:~/.wrsrpmmacros' \
        --with-bugreport=support@windriver.com \
        --verbose \
        --with-db-tools-integrated \
        --with-pcre \
        --without-xz \
        --without-openssl \
        --without-nss \
        --without-gcrypt \
        --without-uuid \
        --without-xar \
        --without-keyutils

%windriver-target
    RPM_VENDOR_WINDRIVER=1
    export RPM_VENDOR_WINDRIVER
    %checkout
    %autogen
    %configure \
        --prefix=/usr \
        --disable-nls \
        --disable-rpath \
        --with-libelf \
        --with-selinux \
        --with-perl \
        --with-python=2.5 \
        --with-zlib=external \
        --with-bzip2=external \
        --with-beecrypt=external \
        --with-neon \
        --with-file=internal \
        --with-popt=external \
        --with-sqlite=external \
        --with-db=internal \
        --with-lua=internal \
        --without-apidocs \
        --with-path-macros='%{_usrlibrpm}/macros:%{_usrlibrpm}/wrs/macros:%{_usrlibrpm}/wrs/default-linux/macros:%{_usrlibrpm}/wrs/%{_target}/macros:%{_etcrpm}/macros.*:%{_etcrpm}/macros:%{_etcrpm}/%{_target}/macros:~/.wrsrpmmacros' \
        --with-bugreport=support@windriver.com \
        --verbose \
        --with-db-tools-integrated \
        --with-pcre \
        --without-xz \
        --without-openssl \
        --without-nss \
        --without-gcrypt \
        --without-uuid \
        --without-xar \
        --without-keyutils

%fedora
    ##
    ## Provision a fedora host sufficiently to build from cvs.
    PKGS="\
	perl-devel \
	python-devel \
	uuid-devel \
	libgcrypt-devel \
	beecrypt-devel \
	nss-devel \
	sqlite-devel \
	libxml2-devel \
	neon-devel \
	bzip2-devel \
	zlib-devel \
	pcre-devel \
	keyutils-libs-devel \
	elfutils-libelf-devel \
	gettext-devel \
	popt-devel \
	automake \
	autoconf \
	byacc \
	cvs \
	libtool \
	gcc \
	gettext \
	make \
	pkgconfig \
    "
    sudo yum -y install $PKGS

%rse
    %standalone

%openpkg
    RPM_VENDOR_OPENPKG=1
    export RPM_VENDOR_OPENPKG
    %standalone

%standalone
    ##
    ##  USE THIS DEVELOPER PROCEDURE IF YOU WANT TO REALLY
    ##  TEST-DRIVE RPM 5 ON ARBITRARY UNIX FLAVORS!
    ##
    ##  This developer procedure is for _fully_ stand-alone building RPM
    ##  5 on arbitrary Unix platforms and with a rather large functional
    ##  extend. It is very close to the procedure OpenPKG will use to
    ##  build RPM 5 in its "bootstrap" package ("openpkg") and hence
    ##  can be used to build RPM 5 from source and on a large number of
    ##  Unix flavors without any additional prerequisites (except the
    ##  development tools, of course). It especially doesn't require
    ##  any of the third-party libraries to be pre-installed in the
    ##  system. Instead it downloads and builds (and *not* installs)
    ##  them side-by-side with RPM 5.
    ##
    ##  NOTICE: As OpenPKG is mainly about using RPM in a true
    ##  stand-alone, self-contained and cross-platform environment,
    ##  this procedure unfortunately is a rather complex one as all(!)
    ##  third-party libraries are required to be built from scratch and
    ##  on arbitrary Unix platforms. This inherently requires lots of
    ##  fiddling with their build environment. Just treat the prepare()
    ##  function below as opaque and do not think about it. It just
    ##  contains all the essential parts of the OpenPKG .spec files for
    ##  achieving this. Nevertheless this whole procedure is completely
    ##  independent of any OpenPKG instance itself, of course.
    ##
    ##  This procedure was used by Ralf S. Engelschall to successfully
    ##  build RPM 5 under at least the following particular Unix
    ##  platforms (each one defined by the combination of hardware
    ##  architecture, operating system and compiler):
    ##
    ##  o 2007-11-11: ix86-freebsd6.2-gcc4.2.2
    ##  o 2007-11-11: ix86-freebsd6.2-gcc4.3.0s20071109
    ##  o 2007-07-17: ix86-freebsd6.2-gcc3.4
    ##  o 2007-07-17: amd64-freebsd6.2-gcc4.1.2
    ##  o 2007-07-17: ix86-freebsd7.0-gcc4.1.2
    ##  o 2007-07-17: ia64-freebsd6.2-gcc4.1.2
    ##  o 2007-07-18: ix86-fedora7-gcc4.2.0
    ##  o 2007-07-19: ix86-fedora7-sunstudio12
    ##  o 2007-07-19: ix86-fedora7-icc10.0
    ##  o 2007-07-17: ix86-debian3.1-gcc4.1.2
    ##  o 2007-07-17: ix86-debian4.0-gcc4.2.0
    ##  o 2007-07-17: ix86-rhel4-gcc4.1.2
    ##  o 2007-07-17: ix86-solaris9-gcc4.1.2
    ##  o 2007-07-17: sparc64-solaris8-gcc4.1.2
    ##  o 2007-11-12: sparc64-solaris9-gcc4.1.2
    ##  o 2007-11-12: sparc64-solaris10-gcc4.1.2
    ##  o 2007-07-17: amd64-solaris10-gcc4.1.2
    ##  o 2007-07-24: ppc-macosx10.4-gcc4.0.1
    ##  o 2007-07-25: ppc-aix5.3-gcc3.3.2
    ##

    #   source reusable companion modules
    @source %standalone-modules

    #   execute implicit shared modules
    standalone_defines
    standalone_prerequisite

    #   execute explicit requested module
    [ $# -eq 0 ] && set -- all
    cmd="standalone_$1"; shift
    ( eval $cmd ${1+"$@"} ) 2>&1

%standalone-modules
    standalone_defines () {
        #   third-party development tools distribution versions
        v_m4="1.4.12"
        v_autoconf="2.63"
        v_automake="1.10"
        v_libtool="2.2.6a"
        v_libtool_subdir="2.2.6"
        v_gettext="0.17"

        #   third-party library distribution versions
        v_zlib="1.2.3"
        v_bzip2="1.0.5"
        v_xz="4.999.8beta"
        v_openssl="0.9.8j"
        v_expat="2.0.1"
        v_neon="0.28.4"
        v_beecrypt="4.1.2"
        v_db="4.7.25"
        v_sqlite="3.6.11"
        v_lua="5.1.4"
        v_file="5.00"
        v_popt="1.14"
        v_libxml2="2.7.3"
        v_xar="1.5.2"
        v_pcre="7.8"
        v_uuid="1.6.2"
        v_config="20090306"

        #   third-party distribution files
        dist=""
        dist="${dist} m4-${v_m4}.tar.gz,http://rpm5.org/files/3rd/,ftp://ftp.gnu.org/gnu/m4/"
        dist="${dist} autoconf-${v_autoconf}.tar.gz,http://rpm5.org/files/3rd/,ftp://ftp.gnu.org/gnu/autoconf/"
        dist="${dist} automake-${v_automake}.tar.gz,http://rpm5.org/files/3rd/,ftp://sources.redhat.com/pub/automake/"
        dist="${dist} libtool-${v_libtool}.tar.gz,http://rpm5.org/files/3rd/,ftp://ftp.gnu.org/gnu/libtool/"
        dist="${dist} gettext-${v_gettext}.tar.gz,http://rpm5.org/files/3rd/,ftp://ftp.gnu.org/gnu/gettext/"
        dist="${dist} zlib-${v_zlib}.tar.gz,http://rpm5.org/files/3rd/,http://www.zlib.net/"
        dist="${dist} bzip2-${v_bzip2}.tar.gz,http://rpm5.org/files/3rd/,http://www.bzip.org/${v_bzip2}/"
        dist="${dist} xz-${v_xz}.tar.gz,http://rpm5.org/files/3rd/,http://tukaani.org/xz/"
        dist="${dist} openssl-${v_openssl}.tar.gz,http://rpm5.org/files/3rd/,ftp://ftp.openssl.org/source/"
        dist="${dist} expat-${v_expat}.tar.gz,http://rpm5.org/files/3rd/,http://switch.dl.sourceforge.net/expat/"
        dist="${dist} neon-${v_neon}.tar.gz,http://rpm5.org/files/3rd/,http://www.webdav.org/neon/"
        dist="${dist} beecrypt-${v_beecrypt}.tar.gz,http://rpm5.org/files/3rd/,http://switch.dl.sourceforge.net/beecrypt/"
        dist="${dist} db-${v_db}.tar.gz,http://rpm5.org/files/3rd/,http://download-uk.oracle.com/berkeley-db/"
        dist="${dist} sqlite-${v_sqlite}.tar.gz,http://rpm5.org/files/3rd/,http://www.sqlite.org/"
        dist="${dist} lua-${v_lua}.tar.gz,http://rpm5.org/files/3rd/,http://www.lua.org/ftp/"
        dist="${dist} file-${v_file}.tar.gz,http://rpm5.org/files/3rd/,ftp://ftp.astron.com/pub/file/"
        dist="${dist} popt-${v_popt}.tar.gz,http://rpm5.org/files/3rd/,http://rpm5.org/files/popt/"
        dist="${dist} libxml2-${v_libxml2}.tar.gz,http://rpm5.org/files/3rd/,ftp://xmlsoft.org/libxml2/"
        dist="${dist} xar-${v_xar}.tar.gz,http://rpm5.org/files/3rd/,http://xar.googlecode.com/files/"
        dist="${dist} pcre-${v_pcre}.tar.gz,http://rpm5.org/files/3rd/,ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/"
        dist="${dist} uuid-${v_uuid}.tar.gz,http://rpm5.org/files/3rd/,ftp://ftp.ossp.org/pkg/lib/uuid/"

        #   third-party distribution patches (for portability and bugfix reasons only)
        dist="${dist} automake-${v_automake}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} gettext-${v_gettext}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} openssl-${v_openssl}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} beecrypt-${v_beecrypt}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} db-${v_db}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} sqlite-${v_sqlite}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} lua-${v_lua}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} file-${v_file}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} popt-${v_popt}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} libxml2-${v_libxml2}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} xar-${v_xar}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} pcre-${v_pcre}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} xz-${v_xz}.patch,http://rpm5.org/files/3rd/"
        dist="${dist} config.guess-${v_config},http://rpm5.org/files/3rd/"
        dist="${dist} config.sub-${v_config},http://rpm5.org/files/3rd/"
    }

    standalone_prerequisite () {
        #   tool prerequisite check
        for tool in gzip tar patch perl; do
            variable=`echo "$tool" | tr '[a-z]' '[A-Z]'`
            eval "val=\"\${$variable+set}\""
            if [ ".$val" = .set ]; then
                eval "$tool=\"\${$variable}\""
            else
                if [ ".`(which $tool) 2>/dev/null | egrep '^/'`" != . ]; then
                    eval "$tool=\"$tool\""
                else
                    echo "devtool:ERROR: sorry, \"$tool\" required in \$PATH (or set \$$variable)" 1>&2
                    exit 1
                fi
            fi
            eval "export $tool"
        done

        #   determine compiler (to make sure the whole library and application
        #   chain is built with the same one in order to avoid incompatibilities)
        if [ ".$CC" != . ]; then
            cc="$CC"
        elif [ ".`(which gcc) 2>/dev/null | egrep '^/'`" != . ]; then
            cc="gcc"
        elif [ ".`(which icc) 2>/dev/null | egrep '^/'`" != . ]; then
            cc="icc"
        elif [ ".`(which cc) 2>/dev/null | egrep '^/'`" != . ]; then
            cc="cc"
        else
            echo "devtool:ERROR: sorry, C compiler (\"cc\") required in \$PATH (or set \$CC)" 1>&2
            exit 1
        fi
        if [ ".`(which ccache) 2>/dev/null | egrep '^/'`" != . ]; then
            cc="ccache $cc"
        fi

        #    determine some local tools
        SHTOOL="`cd ${DEVTOOL_SRCDIR} && pwd`/devtool.shtool"

        #   third-party base directory, installation default prefix and platform
        base3rd="${DEVTOOL_SRCDIR}/../3rd"
        prefix="/tmp/rpm"
        platform=`$SHTOOL platform -n -L -S "" -C "+" -F '%<ap>-%<sp>'`
    }

    standalone_download () {
        #   helper function for downloading a file from an URL
        file="$1"
        name=`echo "$file" | sed -e 's;^.*/\([^/]*\)$;\1;'`
        for url in `echo "$2" | sed -e 's/,/ /g'`; do
            echo "-- downloading $url$name"
            if [ ".`(which curl) 2>/dev/null | egrep '^/'`" != . ]; then
                curl -s -o "$file" "$url$name" || continue
            elif [ ".`(which wget) 2>/dev/null | egrep '^/'`" != . ]; then
                wget -q -O "$file" "$url$name" || continue
            elif [ ".`(which fetch) 2>/dev/null | egrep '^/'`" != . ]; then
                fetch -o "$file" "$url$name" || continue
            elif [ ".`(which lwp-download) 2>/dev/null | egrep '^/'`" != . ]; then
                lwp-download "$url$name" "$file" || continue
            else
                echo "devtool:ERROR: sorry, no download tool found in \$PATH (\"curl\", \"wget\", \"fetch\", \"lwp-download\")" 1>&2
                exit 1
            fi
            if [ -f "$file" ]; then
                break
            fi
        done
        if [ ! -f "$file" ]; then
            echo "devtool:ERROR: failed to download \"$name\"" 1>&2
            exit 1
        fi
    }

    #   prepare build environment
    standalone_prepare () {
        echo "++ establishing third-party area under ($base3rd)"
        for dir in "" src bin bin/$platform run run/$platform; do
            if [ ! -d "$base3rd/$dir" ]; then
                mkdir $base3rd/$dir || exit $?
            fi
        done

        echo "++ establishing third-party distribution files ($base3rd/src/)"
        for spec in $dist; do
            file=`echo "$spec" | sed -e 's;,.*$;;'`
            urls=`echo "$spec" | sed -e 's;^[^,]*;;'`
            if [ ! -f "$base3rd/src/$file" ]; then
                standalone_download "$base3rd/src/$file" "$urls" || exit $?
            fi
        done

        #   extend environment
        prefix_tools="`cd $base3rd/run/$platform && pwd`"
        PATH="$prefix_tools/bin:$prefix_tools/sbin:$PATH"
        PATH="$PATH:/bin:/usr/bin:/sbin:/usr/sbin"
        export PATH

        #   GNU m4 (installed development tool)
        if [ ! -d "$base3rd/bin/$platform/m4-${v_m4}" ]; then
            echo "++ building third-party development tool m4-${v_m4}"
            (   cd $base3rd/bin/$platform
                rm -rf m4-${v_m4}
                $gzip -d -c ../../src/m4-${v_m4}.tar.gz | $tar xf -
                (   cd m4-${v_m4}
                    CC="$cc" \
                    GREP="grep" \
                    ./configure \
                        --prefix="$prefix_tools" \
                        --disable-nls
                    make
                    make install
                    rm -f $prefix_tools/bin/gm4
                    ln $prefix_tools/bin/m4 \
                       $prefix_tools/bin/gm4
                ) || exit $?
            ) || exit $?
        fi

        #   GNU autoconf (installed development tool)
        if [ ! -d "$base3rd/bin/$platform/autoconf-${v_autoconf}" ]; then
            echo "++ building third-party development tool autoconf-${v_autoconf}"
            (   cd $base3rd/bin/$platform
                rm -rf autoconf-${v_autoconf}
                $gzip -d -c ../../src/autoconf-${v_autoconf}.tar.gz | $tar xf -
                (   cd autoconf-${v_autoconf}
                    CC="$cc" \
                    ACLOCAL=true \
                    AUTOMAKE=true \
                    AUTOCONF=true \
                    AUTOHEADER=true \
                    MAKEINFO=true \
                    GREP=grep \
                    ./configure \
                        --prefix="$prefix_tools"
                    make
                    make install
                ) || exit $?
            ) || exit $?
        fi

        #   GNU automake (installed development tool)
        if [ ! -d "$base3rd/bin/$platform/automake-${v_automake}" ]; then
            echo "++ building third-party development tool automake-${v_automake}"
            (   cd $base3rd/bin/$platform
                rm -rf automake-${v_automake}
                $gzip -d -c ../../src/automake-${v_automake}.tar.gz | $tar xf -
                (   cd automake-${v_automake}
                    $patch -p0 <../../../src/automake-${v_automake}.patch
                    $SHTOOL subst \
                        -e "s;^\(.SUFFIXES: .*\) \.info \(.*\);\1 \2;" \
                        doc/Makefile.in
                    CC="$cc" \
                    ACLOCAL=true \
                    AUTOMAKE=true \
                    AUTOCONF=true \
                    AUTOHEADER=true \
                    MAKEINFO=true \
                    GREP=grep \
                    ./configure \
                        --prefix="$prefix_tools"
                    make
                    make install
                ) || exit $?
            ) || exit $?
        fi

        #   GNU libtool (installed development tool)
        if [ ! -d "$base3rd/bin/$platform/libtool-${v_libtool_subdir}" ]; then
            echo "++ building third-party development tool libtool-${v_libtool}"
            (   cd $base3rd/bin/$platform
                rm -rf libtool-${v_libtool_subdir}
                $gzip -d -c ../../src/libtool-${v_libtool}.tar.gz | $tar xf -
                (   cd libtool-${v_libtool_subdir}
                    $SHTOOL subst \
                        -e 's;grep ggrep;grep ggrep egrep;g' \
                        -e 's;-e .-(cannot match)-.;;g' \
                        `find . -name configure -print`
                    CC="$cc" \
                    GREP=grep \
                    ./configure \
                        --prefix="$prefix_tools" \
                        --enable-static \
                        --enable-shared
                    make
                    make install
                    rm -f $prefix_tools/bin/glibtoolize
                    ln $prefix_tools/bin/libtoolize \
                       $prefix_tools/bin/glibtoolize
                ) || exit $?
            ) || exit $?
        fi

        #   GNU gettext (installed development tool)
        if [ ! -d "$base3rd/bin/$platform/gettext-${v_gettext}" ]; then
            echo "++ building third-party development tool gettext-${v_gettext}"
            (   cd $base3rd/bin/$platform
                rm -rf gettext-${v_gettext}
                $gzip -d -c ../../src/gettext-${v_gettext}.tar.gz | $tar xf -
                (   cd gettext-${v_gettext}
                    $patch -p0 <../../../src/gettext-${v_gettext}.patch
                    $SHTOOL subst \
                        -e '/localcharset.\$lo/d' \
                        gettext-runtime/intl/Makefile.in
                    $SHTOOL subst \
                        -e 's;\(SUBDIRS.*=.*\)intl-java ;\1;' \
                        -e 's;\(SUBDIRS.*=.*\)intl-csharp ;\1;' \
                         gettext-runtime/Makefile.in
                    $SHTOOL subst \
                        -e 's;^.*intl-java/Makefile.*$;;' \
                        -e 's;^.*intl-csharp/Makefile.*$;;' \
                        gettext-runtime/configure
                    $SHTOOL subst \
                        -e 's;@BUILDJAVA@;no;g' \
                        -e 's;@BUILDJAVAEXE@;no;g' \
                        -e 's;@BUILDCSHARP@;no;g' \
                        gettext-tools/src/Makefile.in
                    $SHTOOL subst \
                        -e 's;^\(SUBDIRS =.*\)tests gnulib-tests examples;\1;' \
                        gettext-tools/Makefile.in
                    $SHTOOL subst \
                        -e 's;\#if USEJEXE;#ifdef USEJEXE;' \
                        gettext-tools/src/read-java.c \
                        gettext-tools/src/urlget.c
                    $SHTOOL subst \
                        -e 's;\(#define LIBXML_ICONV_ENABLED\);\1_DUMMY;' \
                        gnulib-local/lib/libxml/xmlversion.in.h \
                        gettext-tools/gnulib-lib/libxml/xmlversion.in.h
                    CC="$cc" \
                    GREP="grep" \
                    ./configure \
                        --prefix="$prefix_tools" \
                        --without-libiconv-prefix \
                        --with-included-gettext \
                        --without-libexpat-prefix \
                        --disable-libasprintf \
                        --disable-threads \
                        --disable-csharp \
                        --disable-java \
                        --disable-nls \
                        --disable-shared
                    make
                    make install
                ) || exit $?
            ) || exit $?
        fi

        #   ZLib (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/zlib-${v_zlib}" ]; then
            echo "++ building third-party library zlib-${v_zlib}"
            (   cd $base3rd/bin/$platform
                rm -rf zlib-${v_zlib}
                $gzip -d -c ../../src/zlib-${v_zlib}.tar.gz | $tar xf -
                (   cd zlib-${v_zlib}
                    CC="$cc" \
                    ./configure
                    make libz.a
                ) || exit $?
            ) || exit $?
        fi

        #   BZip2 (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/bzip2-${v_bzip2}" ]; then
            echo "++ building third-party library bzip2-${v_bzip2}"
            (   cd $base3rd/bin/$platform
                rm -rf bzip2-${v_bzip2}
                $gzip -d -c ../../src/bzip2-${v_bzip2}.tar.gz | $tar xf -
                (   cd bzip2-${v_bzip2}
                    make CC="$cc" CFLAGS="-O" libbz2.a bzip2
                ) || exit $?
            ) || exit $?
        fi

        #   XZ (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/xz-${v_xz}" ]; then
            echo "++ building third-party library xz-${v_xz}"
            (   cd $base3rd/bin/$platform
                rm -rf xz-${v_xz}
                $gzip -d -c ../../src/xz-${v_xz}.tar.gz | $tar xf -
                (   cd xz-${v_xz}
                    $patch -p0 <../../../src/xz-${v_xz}.patch
                    CC="$cc" \
                    ./configure \
                        --without-libiconv-prefix \
                        --without-libintl-prefix \
                        --disable-assembler \
                        --disable-nls \
                        --disable-shared
                    ( cd src/liblzma && make ) 
                    ln -s src/liblzma/api/lzma .
                    ln -s src/liblzma/api/lzma.h .
                    ln -s src/liblzma/.libs/liblzma.a .
                ) || exit $?
            ) || exit $?
        fi

        #   OpenSSL (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/openssl-${v_openssl}" ]; then
            echo "++ building third-party library openssl-${v_openssl}"
            (   cd $base3rd/bin/$platform
                rm -rf openssl-${v_openssl}
                $gzip -d -c ../../src/openssl-${v_openssl}.tar.gz | $tar xf -
                (   cd openssl-${v_openssl}
                    $patch -p0 <../../../src/openssl-${v_openssl}.patch
                    $SHTOOL subst \
                        -e 's;-m486;-march=i486;g' \
                        -e 's;BN_LLONG *;;' \
                        Configure
                    $SHTOOL subst \
                        -e 's;test "$OSTYPE" = msdosdjgpp;true;' \
                        util/point.sh
                    $SHTOOL subst \
                        -e "1s;^.*\$;#!$PERL;" \
                        Configure `find . -name "*.pl" -print`
                    opts=""
                    case `$SHTOOL platform -n -L -S "" -C "+" -F "%<ap>-%<sp>"` in
                        *-solaris*      ) opts="-lnsl -lsocket" ;;
                    esac
                    case `$SHTOOL platform -n -L -S "" -C "+" -F "%<ap>-%<sp>"` in
                        amd64-*          ) opts="$opts -fPIC" ;;
                        ia64-*           ) opts="$opts -fPIC" ;;
                        sparc64-freebsd* ) opts="$opts -fPIC" ;;
                    esac
                    CC="$cc" \
                    ./config \
                        --prefix=%{l_prefix} \
                        no-asm no-shared no-dso \
                        no-zlib no-idea no-threads no-krb5 no-hw \
                        $opts
                    make build_libs build_apps
                    ( mkdir lib; cd lib; ln -s ../lib*.a . )
                ) || exit $?
            ) || exit $?
        fi

        #   Expat (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/expat-${v_expat}" ]; then
            echo "++ building third-party library expat-${v_expat}"
            (   cd $base3rd/bin/$platform
                rm -rf expat-${v_expat}
                $gzip -d -c ../../src/expat-${v_expat}.tar.gz | $tar xf -
                (   cd expat-${v_expat}
                    CC="$cc" \
                    ./configure \
                        --disable-shared
                    make libexpat.la
                ) || exit $?
            ) || exit $?
        fi

        #   Neon (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/neon-${v_neon}" ]; then
            echo "++ building third-party library neon-${v_neon}"
            (   cd $base3rd/bin/$platform
                rm -rf neon-${v_neon}
                $gzip -d -c ../../src/neon-${v_neon}.tar.gz | $tar xf -
                (   cd neon-${v_neon}
                    ( echo "ac_cv_path_KRB5_CONFIG="
                    ) >config.cache
                    CC="$cc" \
                    CPPFLAGS="-I`pwd`/../openssl-${v_openssl}/include -I`pwd`/../zlib-${v_zlib} -I`pwd`/../expat-${v_expat}/lib" \
                    LDFLAGS="-L`pwd`/../openssl-${v_openssl}/lib -L`pwd`/../zlib-${v_zlib} -L`pwd`/../expat-${v_expat}/lib -L`pwd`/../expat-${v_expat}/.libs" \
                    ./configure \
                        --cache-file=./config.cache \
                        --with-libs=/tmp \
                        --with-ssl=openssl \
                        --without-libxml2 \
                        --with-expat \
                        --enable-webdav \
                        --disable-nls \
                        --disable-shared \
                        --enable-static
                    make
                    ( cd src; ln -s . neon )
                ) || exit $?
            ) || exit $?
        fi

        #   BeeCrypt (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/beecrypt-${v_beecrypt}" ]; then
            echo "++ building third-party library beecrypt-${v_beecrypt}"
            (   cd $base3rd/bin/$platform
                rm -rf beecrypt-${v_beecrypt}
                $gzip -d -c ../../src/beecrypt-${v_beecrypt}.tar.gz | $tar xf -
                (   cd beecrypt-${v_beecrypt}
                    $patch -p0 <../../../src/beecrypt-${v_beecrypt}.patch
                    cp ../../../src/config.guess-${v_config} config.guess
                    cp ../../../src/config.sub-${v_config} config.sub
                    $SHTOOL subst \
                        -e 's;^[ 	][ 	]*#;#;' \
                        aes.c base64.c blowfish.c entropy.c fips186.c fips186.h md5.c \
                        md5.h mp.c mtprng.c mtprng.h sha1.c sha1.h sha256.c sha256.h timestamp.c
                    $SHTOOL subst \
                       -e 's;cppglue\.lo;;g' \
                       -e 's;cppglue\.cxx;;g' \
                       -e '/^CXX = /s;@CXX@;@CC@;g' \
                       Makefile.in
                    $SHTOOL subst \
                        -e '/LINENO: error: C[+]* preprocessor/{N;N;N;N;s/.*/:/;}' \
                        configure
                    ( echo 'ac_cv_have_dev_dsp=no'
                      echo 'ac_cv_have_dev_audio=no'
                      echo 'ac_cv_func_gettimeofday=yes'
                      echo 'bc_cv_as_noexecstack=no'
                    ) >config.cache
                    CC="$cc" \
                    CFLAGS="-O" \
                    ./configure \
                        --cache-file=./config.cache \
                        --without-cplusplus \
                        --without-java \
                        --without-python \
                        --with-cpu=none \
                        --with-arch=none \
                        --disable-threads \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   Berkeley-DB (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/db-${v_db}" ]; then
            echo "++ building third-party library db-${v_db}"
            (   cd $base3rd/bin/$platform
                rm -rf db-${v_db}
                $gzip -d -c ../../src/db-${v_db}.tar.gz | $tar xf -
                (   cd db-${v_db}
                    $patch -p0 <../../../src/db-${v_db}.patch
                    mutex="UNIX/fcntl"
                    if [ ".`($cc -v; $cc --version) </dev/null 2>&1 | grep -i 'gcc'`" != . ]; then
                        case "$platform" in
                            ix86-*   ) mutex="x86/gcc-assembly"   ;;
                            ia64-*   ) mutex="ia64/gcc-assembly"  ;;
                            sparc*-* ) mutex="Sparc/gcc-assembly" ;;
                            ppc*-*   ) mutex="PPC/gcc-assembly"   ;;
                            alpha*-* ) mutex="ALPHA/gcc-assembly" ;;
                        esac
                    fi
                    cd build_unix
                    CC="$cc" \
                    ../dist/configure \
                        --disable-compat185 \
                        --disable-cxx \
                        --disable-java \
                        --with-mutex="$mutex" \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   SQLite (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/sqlite-${v_sqlite}" ]; then
            echo "++ building third-party library sqlite-${v_sqlite}"
            (   cd $base3rd/bin/$platform
                rm -rf sqlite-${v_sqlite}
                $gzip -d -c ../../src/sqlite-${v_sqlite}.tar.gz | $tar xf -
                (   cd sqlite-${v_sqlite}
                    $patch -p0 <../../../src/sqlite-${v_sqlite}.patch
                    CC="$cc" \
                    LIBS="-lm" \
                    ./configure \
                        --disable-utf8 \
                        --disable-readline \
                        --disable-threadsafe \
                        --disable-debug \
                        --disable-amalgamation \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   Lua (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/lua-${v_lua}" ]; then
            echo "++ building third-party library lua-${v_lua}"
            (   cd $base3rd/bin/$platform
                rm -rf lua-${v_lua}
                $gzip -d -c ../../src/lua-${v_lua}.tar.gz | $tar xf -
                (   cd lua-${v_lua}
                    $patch -p0 <../../../src/lua-${v_lua}.patch
                    platform="posix"
                    case "$platform" in
                        *-linux*   ) platform="linux"   ;;
                        *-freebsd* ) platform="bsd"     ;;
                        *-sunos*   ) platform="solaris" ;;
                    esac
                    make CC="$cc" CFLAGS="-O \$(MYCFLAGS)" $platform
                ) || exit $?
            ) || exit $?
        fi

        #   File (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/file-${v_file}" ]; then
            echo "++ building third-party library file-${v_file}"
            (   cd $base3rd/bin/$platform
                rm -rf file-${v_file}
                $gzip -d -c ../../src/file-${v_file}.tar.gz | $tar xf -
                (   cd file-${v_file}
                    $patch -p0 <../../../src/file-${v_file}.patch
                    ( echo "ac_cv_lib_z_gzopen=no"
                    ) >config.cache
                    CC="$cc" \
                    ./configure \
                        --cache-file=./config.cache \
                        --disable-shared \
                        --disable-nls
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   POPT (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/popt-${v_popt}" ]; then
            echo "++ building third-party library popt-${v_popt}"
            (   cd $base3rd/bin/$platform
                rm -rf popt-${v_popt}
                $gzip -d -c ../../src/popt-${v_popt}.tar.gz | $tar xf -
                (   cd popt-${v_popt}
                    $patch -p0 <../../../src/popt-${v_popt}.patch
                    CC="$cc" \
                    CPPFLAGS="-DOPENPKG -DPOPT_fprintf=fprintf" \
                    GREP="grep" \
                    ./configure \
                        --disable-shared \
                        --with-included-gettext \
                        --without-libintl-prefix \
                        --without-libiconv-prefix \
                        --disable-nls
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   LibXML2 (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/libxml2-${v_libxml2}" ]; then
            echo "++ building third-party library libxml2-${v_libxml2}"
            (   cd $base3rd/bin/$platform
                rm -rf libxml2-${v_libxml2}
                $gzip -d -c ../../src/libxml2-${v_libxml2}.tar.gz | $tar xf -
                (   cd libxml2-${v_libxml2}
                    $patch -p0 <../../../src/libxml2-${v_libxml2}.patch
                    $SHTOOL subst \
                        -e '/LINENO: error: C[+]* preprocessor/{N;N;N;N;s/.*/:/;}' \
                        configure
                    CC="$cc" \
                    ./configure \
                        --without-iconv \
                        --disable-shared \
                        --disable-corba \
                        --without-threads \
                        --without-python
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   XAR (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/xar-${v_xar}" ]; then
            echo "++ building third-party library xar-${v_xar}"
            (   cd $base3rd/bin/$platform
                rm -rf xar-${v_xar}
                $gzip -d -c ../../src/xar-${v_xar}.tar.gz | $tar xf -
                (   cd xar-${v_xar}
                    $patch -p0 <../../../src/xar-${v_xar}.patch
                    if [ "`uname`" = "Darwin" ]; then STATICFLAGS="-Wl,-search_paths_first"; fi
                    CC="$cc" \
                    CPPFLAGS="-I`pwd`/../openssl-${v_openssl}/include -I`pwd`/../zlib-${v_zlib} -I`pwd`/../libxml2-${v_libxml2}/include" \
                    LDFLAGS="-L`pwd`/../openssl-${v_openssl}/lib -L`pwd`/../zlib-${v_zlib} -L`pwd`/../libxml2-${v_libxml2} -L`pwd`/../libxml2-${v_libxml2}/.libs $STATICFLAGS" \
                    ./configure \
                        --with-xml2-config="`pwd`/../libxml2-${v_libxml2}/xml2-config" \
                        --disable-autogen \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   PCRE (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/pcre-${v_pcre}" ]; then
            echo "++ building third-party library pcre-${v_pcre}"
            (   cd $base3rd/bin/$platform
                rm -rf pcre-${v_pcre}
                $gzip -d -c ../../src/pcre-${v_pcre}.tar.gz | $tar xf -
                (   cd pcre-${v_pcre}
                    $patch -p0 <../../../src/pcre-${v_pcre}.patch
                    $SHTOOL subst \
                        -e '/LINENO: error: C[+]* preprocessor/{N;N;N;N;s/.*/:/;}' \
                        configure
                    CC="$cc" \
                    GREP="grep" \
                    ./configure \
                        --disable-cpp \
                        --disable-utf8 \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   OSSP uuid (uninstalled third-party library)
        if [ ! -d "$base3rd/bin/$platform/uuid-${v_uuid}" ]; then
            echo "++ building third-party library uuid-${v_uuid}"
            (   cd $base3rd/bin/$platform
                rm -rf uuid-${v_uuid}
                $gzip -d -c ../../src/uuid-${v_uuid}.tar.gz | $tar xf -
                (   cd uuid-${v_uuid}
                    $SHTOOL subst \
                        -e '/LINENO: error: C[+]* preprocessor/{N;N;N;N;s/.*/:/;}' \
                        configure
                    CC="$cc" \
                    GREP="grep" \
                    ./configure \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi
    }

    #   configure build environment
    standalone_autogen () {
        echo "++ generating build environment"
        %autogen
    }

    #   configure build environment
    standalone_configure () {
        echo "++ cleaning up build environment"
        ( cd ${DEVTOOL_SRCDIR}; make distclean || true ) >/dev/null 2>&1

        echo "++ configuring build environment"
        base3rd="`cd $base3rd && pwd`"
        CFLAGS=""
        CPPFLAGS=""
        LDFLAGS=""
        LIBS=""
        GREP="grep"
        if [ ".$RPM_VENDOR_OPENPKG" != . ]; then
            CPPFLAGS="$CPPFLAGS -DRPM_VENDOR_OPENPKG"
            RPM_INTEGRITY_FP=`cat scripts/integrity.fp`
            RPM_INTEGRITY_MV=`grep 'integrity\.version' scripts/integrity.lua |\
                sed -e 's;^.*"\([0-9][0-9.]*\)".*$;\1;'`
            CPPFLAGS="$CPPFLAGS -DRPM_INTEGRITY_FP=\\\"$RPM_INTEGRITY_FP\\\""
            CPPFLAGS="$CPPFLAGS -DRPM_INTEGRITY_MV=\\\"$RPM_INTEGRITY_MV\\\""
        fi
        LDFLAGS="$LDFLAGS -L$base3rd/bin/$platform/openssl-${v_openssl}"       # shameless workaround for Neon/XAR
        LDFLAGS="$LDFLAGS -L$base3rd/bin/$platform/libxml2-${v_libxml2}/.libs" # shameless workaround for XAR
        LDFLAGS="$LDFLAGS -L$base3rd/bin/$platform/zlib-${v_zlib}"             # shameless workaround for XAR
        LIBS="$LIBS -lssl -lcrypto"                                            # shameless workaround for Neon/XAR
        LIBS="$LIBS -lxml2 -lz"                                                # shameless workaround for XAR
        LIBS="$LIBS -lm"                                                       # shameless workaround for SQLite
        export CFLAGS
        export CPPFLAGS
        export LDFLAGS
        export LIBS
        export GREP
        OPTION=""
        OPTION="$OPTION --prefix=\"$prefix\""
        OPTION="$OPTION --mandir=\"$prefix/man\""
        OPTION="$OPTION --with-path-cfg=\"$prefix/etc/rpm\""
        OPTION="$OPTION --with-path-rpmpopt=\"$prefix/lib/rpm/rpmpopt:$prefix/etc/rpm/rpmpopt:~/.rpmpopt\""
        OPTION="$OPTION --with-path-macros=\"$prefix/lib/rpm/macros:$prefix/etc/rpm/macros:~/.rpmmacros\""
        OPTION="$OPTION --with-path-rpmlua=\"$prefix/lib/rpm/rpmlua:$prefix/etc/rpm/rpmlua:~/.rpmlua\""
        OPTION="$OPTION --with-path-lib=\"$prefix/lib/rpm\""
        OPTION="$OPTION --with-path-locale=\"$prefix/share/rpm/locale\""
        OPTION="$OPTION --with-path-database=\"$prefix/var/rpm/db\""
        OPTION="$OPTION --with-path-sources=\"$prefix/var/rpm/src\""
        OPTION="$OPTION --with-bugreport=\"openpkg-users@openpkg.org\""
        OPTION="$OPTION --with-beecrypt=\"$base3rd/bin/$platform/beecrypt-${v_beecrypt}\""
        OPTION="$OPTION --with-openssl=\"$base3rd/bin/$platform/openssl-${v_openssl}\""
        if [ ".$RPM_VENDOR_OPENPKG" != . ]; then
            OPTION="$OPTION --with-lua=\"internal\""
        else
            OPTION="$OPTION --with-lua=\"$base3rd/bin/$platform/lua-${v_lua}/src\""
        fi
        OPTION="$OPTION --with-pcre=\"$base3rd/bin/$platform/pcre-${v_pcre}\""
        OPTION="$OPTION --with-uuid=\"$base3rd/bin/$platform/uuid-${v_uuid}\""
        OPTION="$OPTION --with-file=\"$base3rd/bin/$platform/file-${v_file}\""
        OPTION="$OPTION --with-zlib=\"$base3rd/bin/$platform/zlib-${v_zlib}\""
        OPTION="$OPTION --with-bzip2=\"$base3rd/bin/$platform/bzip2-${v_bzip2}\""
        OPTION="$OPTION --with-neon=\"$base3rd/bin/$platform/neon-${v_neon}\""
        OPTION="$OPTION --with-popt=\"$base3rd/bin/$platform/popt-${v_popt}\""
        OPTION="$OPTION --with-xar=\"$base3rd/bin/$platform/xar-${v_xar}\""
        OPTION="$OPTION --with-sqlite=\"$base3rd/bin/$platform/sqlite-${v_sqlite}\""
        OPTION="$OPTION --with-db=\"$base3rd/bin/$platform/db-${v_db}/build_unix\""
        OPTION="$OPTION --with-xz=\"$base3rd/bin/$platform/xz-${v_xz}\""
        OPTION="$OPTION --without-db-rpc"
        OPTION="$OPTION --without-db-largefile"
        OPTION="$OPTION --with-db-tools-integrated"
        OPTION="$OPTION --with-db-mutex=\"UNIX/fcntl\""
        OPTION="$OPTION --without-pthreads"
        OPTION="$OPTION --without-libelf"
        OPTION="$OPTION --without-selinux"
        OPTION="$OPTION --without-perl"
        OPTION="$OPTION --without-python"
        OPTION="$OPTION --without-apidocs"
        OPTION="$OPTION --disable-build-intlibdep"
        OPTION="$OPTION --disable-build-extlibdep"
        OPTION="$OPTION --disable-build-lafiles"
        OPTION="$OPTION --enable-build-warnings"
        OPTION="$OPTION --enable-build-debug"
        OPTION="$OPTION --disable-shared"
        OPTION="$OPTION --disable-rpath"
        OPTION="$OPTION --disable-nls"
        eval "${DEVTOOL_SRCDIR}/configure -v $OPTION"
    }

    #   build RPM
    standalone_build () {
        make
    }

    #   install RPM
    standalone_install () {
        rm -rf $prefix
        make install
        # install required runtime files for uninstalled third-party library "file" (libmagic)
        install -d -m 755 $prefix/share/file
        if [ -f $base3rd/bin/$platform/file-${v_file}/magic/magic ]; then
        install -m 644 $base3rd/bin/$platform/file-${v_file}/magic/magic $prefix/share/file/
        fi
        install -m 644 $base3rd/bin/$platform/file-${v_file}/magic/magic.mgc $prefix/share/file/
    }

    #   test RPM (trivially only)
    standalone_testdrive () {
        (   set -x
            $prefix/bin/rpm -vv --initdb || exit $?
            $prefix/bin/rpm -vv --import ${DEVTOOL_SRCDIR}/pubkeys/JBJ-GPG-KEY || exit $?
            $prefix/bin/rpm -vv -qa || exit $?
            $prefix/bin/rpm -vv -qi gpg-pubkey-2039b291-3dbaae72 || exit $?
            $prefix/bin/rpm -vv -e gpg-pubkey-2039b291-3dbaae72 || exit $?
            $prefix/bin/rpm -vv -Va || exit $?
            rpmtopdir="`$prefix/bin/rpm --macros=macros --eval %{_topdir}`" # override --macros to avoid ~/.rpmmacros
            $prefix/bin/rpmbuild -vv --macros=macros -ba ${DEVTOOL_SRCDIR}/devtool-test.spec || exit $?
            $prefix/bin/rpmbuild -vv --macros=macros --rebuild $rpmtopdir/SRPMS/devtool-test-1.0-1.src.rpm || exit $?
            $prefix/bin/rpm -vv -qpil $rpmtopdir/RPMS/noarch/devtool-test-1.0-1.noarch.rpm || exit $?
            rm -f $rpmtopdir/SRPMS/devtool-test-1.0-1.src.rpm
            $prefix/bin/rpm -vv -iv $rpmtopdir/RPMS/noarch/devtool-test-1.0-1.noarch.rpm || exit $?
            $prefix/bin/rpm -vv -qi devtool-test-1.0-1 || exit $?
            $prefix/bin/rpm -vv -e devtool-test-1.0-1 || exit $?
            rm -f $rpmtopdir/RPMS/noarch/devtool-test-1.0-1.noarch.rpm
        ) >/tmp/rpm.devtool.standalone.testdrive 2>&1
        if [ $? -ne 0 ]; then
            echo "devtool:standalone:testdrive:ERROR: trivial testsuite failed (trace follows):"
            cat /tmp/rpm.devtool.standalone.testdrive
        fi
        rm -f /tmp/rpm.devtool.standalone.testdrive
    }

    #   do all at once
    standalone_all () {
        standalone_prepare
        standalone_autogen
        standalone_configure
        standalone_build
        standalone_install
        standalone_testdrive
    }

%afb
    %tiger

%panther
    MACOSX_DEPLOYMENT_TARGET=10.3
    export MACOSX_DEPLOYMENT_TARGET
    UNIVERSAL_SDK="/Developer/SDKs/MacOSX10.3.9.sdk"
    UNIVERSAL_CPP="gcc-3.3 -E"
    UNIVERSAL_CC="gcc-3.3"; export PATH="$PATH:/usr/libexec/gcc/darwin/ppc/3.3" # horrible Intel workaround
    UNIVERSAL_CXX="g++-3.3"
    UNIVERSAL_CPPFLAGS="-I${UNIVERSAL_SDK}/usr/include"
    UNIVERSAL_CFLAGS="-isystem ${UNIVERSAL_SDK}/usr/include -isystem ${UNIVERSAL_SDK}/usr/include/gcc/darwin/3.3 -arch ppc"
    UNIVERSAL_LDFLAGS="-Wl,-syslibroot,${UNIVERSAL_SDK} -arch ppc"
    UNIVERSAL_TARGET="--host powerpc-apple-darwin7 --target powerpc-apple-darwin7"
    platform=Panther
    @source %macosx

%tiger
    MACOSX_DEPLOYMENT_TARGET=10.4
    export MACOSX_DEPLOYMENT_TARGET
    UNIVERSAL_SDK="/Developer/SDKs/MacOSX10.4u.sdk"
    UNIVERSAL_CPP="gcc-4.0 -E -isysroot ${UNIVERSAL_SDK}"
    UNIVERSAL_CC="gcc-4.0"
    UNIVERSAL_CXX="g++-4.0"
    UNIVERSAL_CPPFLAGS=""
    UNIVERSAL_CFLAGS="-isysroot ${UNIVERSAL_SDK} -arch ppc -arch i386"
    UNIVERSAL_LDFLAGS="-arch ppc -arch i386"
    UNIVERSAL_TARGET="--host i686-apple-darwin8 --target i686-apple-darwin8"
    platform=Tiger
    @source %macosx

%leopard
    MACOSX_DEPLOYMENT_TARGET=10.5
    export MACOSX_DEPLOYMENT_TARGET
    UNIVERSAL_SDK="/Developer/SDKs/MacOSX10.5.sdk"
    UNIVERSAL_CPP="gcc-4.0 -E -isysroot ${UNIVERSAL_SDK}"
    UNIVERSAL_CC="gcc-4.0"
    UNIVERSAL_CXX="g++-4.0"
    UNIVERSAL_CPPFLAGS=""
    UNIVERSAL_CFLAGS="-isysroot ${UNIVERSAL_SDK} -arch ppc -arch i386"
    UNIVERSAL_LDFLAGS="-arch ppc -arch i386"
    UNIVERSAL_TARGET="--host i686-apple-darwin9 --target i686-apple-darwin9"
    platform=Leopard
    @source %macosx

%darwin
    %macosx

%macosx
    ##
    ##  Builds a Universal Binary (ppc/i386), on the Mac OS X 10.x platforms.
    ##  (this target is heavilly inspired by the OpenPKG "standalone" target)
    ##
    ##  Written by Anders F Bjorklund in memoriam of the rpm4darwin project
    ##  which provided the legacy RPM 4.0 to 4.3, for Mac OS X 10.1 to 10.4
    ##  It can also be used if you want access to the RPM tools or libraries
    ##  from RPM, without having to install all requirements from MacPorts.
    ##
    ##  These tools are built local: m4, autoconf, automake, libtool, gettext
    ##  (the system-provided versions are too old, and thus cannot be used...)
    ##  Note: "libtool" is called "glibtool" on the Darwin platform, due to a
    ##  name conflict with the system linker which is also called libtool(1)
    ##
    ##  Shipped programs/libraries are built as Universal Binaries (i.e. fat)
    ##  with: -isysroot /Developer/SDKs/MacOSX10.x.sdk -arch ppc -arch i386
    ##  This also requires --disable-dependency-tracking, since it doesn't
    ##  work with multiple -arch flags (see Apple's Technical Note TN2137)
    ##
    ##  These libraries are built internally: db, lua, syck, file, xar, xz
    ##  These are statically linked: neon, beecrypt, sqlite, popt, pcre, uuid
    ##  (building popt statically requires that the required popt.h header
    ##  is included within the rpm headers, so that it can be found later)
    ##
    ##  The package is configured to install in /usr/local and /var/local,
    ##  with the RPM configuration files in /etc. RPM libraries are dynamic.
    ##  The Perl module for RPM is included, built in /Library/Perl/
    ##  The Python module for RPM is included, built in /Library/Python/
    ##

    @source %standalone-modules
    standalone_defines

    #    determine some local tools
    SHTOOL="`cd ${DEVTOOL_SRCDIR} && pwd`/devtool.shtool"
    if [ ".$UNIVERSAL_SDK" != "." ]; then
        if [ ! -d "$UNIVERSAL_SDK" ]; then
            echo "devtool:ERROR: sorry, \"$UNIVERSAL_SDK\" is missing" 1>&2
            exit 1
        fi
    fi
    test ".$UNIVERSAL_CPP" == "." && UNIVERSAL_CPP="gcc -E"
    test ".$UNIVERSAL_CC" == "." && UNIVERSAL_CC="gcc"
    test ".$UNIVERSAL_CXX" == "." && UNIVERSAL_CXX="g++"

    #   third-party base directory
    basemac="${DEVTOOL_SRCDIR}/../mac"
    test ".$platform" == "." && platform="MacOSX" # needs subdir

    #   prepare build environment
    prepare () {
        echo "++ establishing third-party area under ($basemac)"
        for dir in "" src bin bin/$platform run; do
            if [ ! -d "$basemac/$dir" ]; then
                mkdir $basemac/$dir || exit $?
            fi
        done

        echo "++ establishing third-party distribution files ($basemac/src/)"
        for spec in $dist; do
            file=`echo "$spec" | sed -e 's;,.*$;;'`
            urls=`echo "$spec" | sed -e 's;^[^,]*;;'`
            if [ ! -f "$basemac/src/$file" ]; then
                standalone_download "$basemac/src/$file" "$urls" || exit $?
            fi
        done

        #   extend environment
        prefix_tools="`cd $basemac/run && pwd`"
        PATH="$prefix_tools/bin:$prefix_tools/sbin:$PATH"
        PATH="$PATH:/bin:/usr/bin:/sbin:/usr/sbin"
        export PATH

        ### development tools (host native)
        
        #   GNU m4 (installed development tool)
        if [ ! -d "$basemac/bin/m4-${v_m4}" ]; then
            echo "++ building third-party development tool m4-${v_m4}"
            (   cd $basemac/bin
                rm -rf m4-${v_m4}
                gzip -d -c ../src/m4-${v_m4}.tar.gz | gnutar xf -
                (   cd m4-${v_m4}
                    CC="cc" \
                    GREP="grep" \
                    ./configure \
                        --prefix="$prefix_tools" \
                        --disable-nls
                    make
                    make install
                    rm -f $prefix_tools/bin/gm4
                    ln $prefix_tools/bin/m4 \
                       $prefix_tools/bin/gm4
                ) || exit $?
            ) || exit $?
        fi

        #   GNU autoconf (installed development tool)
        if [ ! -d "$basemac/bin/autoconf-${v_autoconf}" ]; then
            echo "++ building third-party development tool autoconf-${v_autoconf}"
            (   cd $basemac/bin
                rm -rf autoconf-${v_autoconf}
                gzip -d -c ../src/autoconf-${v_autoconf}.tar.gz | gnutar xf -
                (   cd autoconf-${v_autoconf}
                    CC="cc" \
                    ACLOCAL=true \
                    AUTOMAKE=true \
                    AUTOCONF=true \
                    AUTOHEADER=true \
                    MAKEINFO=true \
                    GREP=grep \
                    ./configure \
                        --prefix="$prefix_tools"
                    make
                    make install
                ) || exit $?
            ) || exit $?
        fi

        #   GNU automake (installed development tool)
        if [ ! -d "$basemac/bin/automake-${v_automake}" ]; then
            echo "++ building third-party development tool automake-${v_automake}"
            (   cd $basemac/bin
                rm -rf automake-${v_automake}
                gzip -d -c ../src/automake-${v_automake}.tar.gz | gnutar xf -
                (   cd automake-${v_automake}
                    patch -p0 <../../src/automake-${v_automake}.patch
                    $SHTOOL subst \
                        -e "s;^\(.SUFFIXES: .*\) \.info \(.*\);\1 \2;" \
                        doc/Makefile.in
                    CC="cc" \
                    ACLOCAL=true \
                    AUTOMAKE=true \
                    AUTOCONF=true \
                    AUTOHEADER=true \
                    MAKEINFO=true \
                    GREP=grep \
                    ./configure \
                        --prefix="$prefix_tools"
                    make
                    make install
                ) || exit $?
            ) || exit $?
        fi

        #   GNU libtool (installed development tool)
        if [ ! -d "$basemac/bin/libtool-${v_libtool_subdir}" ]; then
            echo "++ building third-party development tool libtool-${v_libtool}"
            (   cd $basemac/bin
                rm -rf libtool-${v_libtool_subdir}
                gzip -d -c ../src/libtool-${v_libtool}.tar.gz | gnutar xf -
                (   cd libtool-${v_libtool_subdir}
                    $SHTOOL subst \
                        -e 's;grep ggrep;grep ggrep egrep;g' \
                        -e 's;-e .-(cannot match)-.;;g' \
                        `find . -name configure -print`
                    CC="cc" \
                    GREP=grep \
                    ./configure \
                        --prefix="$prefix_tools" \
                        --program-prefix="g" \
                        --enable-static \
                        --enable-shared
                    make
                    make install
                ) || exit $?
            ) || exit $?
        fi

        #   GNU gettext (installed development tool)
        if [ ! -d "$basemac/bin/gettext-${v_gettext}" ]; then
            echo "++ building third-party development tool gettext-${v_gettext}"
            (   cd $basemac/bin
                rm -rf gettext-${v_gettext}
                gzip -d -c ../src/gettext-${v_gettext}.tar.gz | gnutar xf -
                (   cd gettext-${v_gettext}
                    patch -p0 <../../src/gettext-${v_gettext}.patch
                    $SHTOOL subst \
                        -e '/localcharset.\$lo/d' \
                        gettext-runtime/intl/Makefile.in
                    $SHTOOL subst \
                        -e 's;\(SUBDIRS.*=.*\)intl-java ;\1;' \
                        -e 's;\(SUBDIRS.*=.*\)intl-csharp ;\1;' \
                         gettext-runtime/Makefile.in
                    $SHTOOL subst \
                        -e 's;^.*intl-java/Makefile.*$;;' \
                        -e 's;^.*intl-csharp/Makefile.*$;;' \
                        gettext-runtime/configure
                    $SHTOOL subst \
                        -e 's;@BUILDJAVA@;no;g' \
                        -e 's;@BUILDJAVAEXE@;no;g' \
                        -e 's;@BUILDCSHARP@;no;g' \
                        gettext-tools/src/Makefile.in
                    $SHTOOL subst \
                        -e 's;^\(SUBDIRS =.*\)tests gnulib-tests examples;\1;' \
                        gettext-tools/Makefile.in
                    $SHTOOL subst \
                        -e 's;\#if USEJEXE;#ifdef USEJEXE;' \
                        gettext-tools/src/read-java.c \
                        gettext-tools/src/urlget.c
                    $SHTOOL subst \
                        -e 's;\(#define LIBXML_ICONV_ENABLED\);\1_DUMMY;' \
                        gnulib-local/lib/libxml/xmlversion.in.h \
                        gettext-tools/gnulib-lib/libxml/xmlversion.in.h
                    CC="cc" \
                    GREP="grep" \
                    ./configure \
                        --prefix="$prefix_tools" \
                        --without-libiconv-prefix \
                        --with-included-gettext \
                        --without-libexpat-prefix \
                        --disable-libasprintf \
                        --disable-threads \
                        --disable-csharp \
                        --disable-java \
                        --disable-nls \
                        --disable-shared
                    make
                    make install
                ) || exit $?
            ) || exit $?
        fi

        ### universal binaries (cross-compiled)

        #   Expat (uninstalled third-party library)
        if [ ! -d "$basemac/bin/$platform/expat-${v_expat}" ]; then
            echo "++ building third-party library expat-${v_expat}"
            (   cd $basemac/bin/$platform
                rm -rf expat-${v_expat}
                gzip -d -c ../../src/expat-${v_expat}.tar.gz | gnutar xf -
                (   cd expat-${v_expat}
                    CC="$UNIVERSAL_CC" \
                    CPPFLAGS="$UNIVERSAL_CPPFLAGS" \
                    CFLAGS="-O2 -g $UNIVERSAL_CFLAGS" \
                    LDFLAGS="$UNIVERSAL_LDFLAGS" \
                    ./configure $UNIVERSAL_TARGET \
                        --disable-shared
                    make libexpat.la
                ) || exit $?
            ) || exit $?
        fi

        #   Neon (uninstalled third-party library)
        if [ ! -d "$basemac/bin/$platform/neon-${v_neon}" ]; then
            echo "++ building third-party library neon-${v_neon}"
            (   cd $basemac/bin/$platform
                rm -rf neon-${v_neon}
                gzip -d -c ../../src/neon-${v_neon}.tar.gz | gnutar xf -
                (   cd neon-${v_neon}
                    ( echo "ac_cv_path_KRB5_CONFIG="
                    ) >config.cache
                    CC="$UNIVERSAL_CC" \
                    CPPFLAGS="$UNIVERSAL_CPPFLAGS" \
                    CPPFLAGS="-I`pwd`/../expat-${v_expat}/lib" \
                    CFLAGS="-O2 -g $UNIVERSAL_CFLAGS" \
                    LDFLAGS="-L`pwd`/../expat-${v_expat}/lib -L`pwd`/../expat-${v_expat}/.libs $UNIVERSAL_LDFLAGS" \
                    ./configure $UNIVERSAL_TARGET \
                        --cache-file=./config.cache \
                        --with-libs=/tmp \
                        --with-ssl=openssl \
                        --without-libxml2 \
                        --with-expat \
                        --enable-webdav \
                        --disable-nls \
                        --disable-shared \
                        --enable-static
                    make
                    ( cd src; ln -s . neon )
                ) || exit $?
            ) || exit $?
        fi

        #   BeeCrypt (uninstalled third-party library)
        if [ ! -d "$basemac/bin/$platform/beecrypt-${v_beecrypt}" ]; then
            echo "++ building third-party library beecrypt-${v_beecrypt}"
            (   cd $basemac/bin/$platform
                rm -rf beecrypt-${v_beecrypt}
                gzip -d -c ../../src/beecrypt-${v_beecrypt}.tar.gz | gnutar xf -
                (   cd beecrypt-${v_beecrypt}
                    patch -p0 <../../../src/beecrypt-${v_beecrypt}.patch
                    cp ../../../src/config.guess-${v_config} config.guess
                    cp ../../../src/config.sub-${v_config} config.sub
                    $SHTOOL subst \
                        -e 's;^[ 	][ 	]*#;#;' \
                        aes.c base64.c blowfish.c entropy.c fips186.c fips186.h md5.c \
                        md5.h mp.c mtprng.c mtprng.h sha1.c sha1.h sha256.c sha256.h timestamp.c
                    $SHTOOL subst \
                       -e 's;cppglue\.lo;;g' \
                       -e 's;cppglue\.cxx;;g' \
                       -e '/^CXX = /s;@CXX@;@CC@;g' \
                       Makefile.in
                    $SHTOOL subst \
                        -e '/LINENO: error: C[+]* preprocessor/{N;N;N;N;s/.*/:/;}' \
                        configure
                    ( echo 'ac_cv_have_dev_dsp=no'
                      echo 'ac_cv_have_dev_audio=no'
                      echo 'ac_cv_func_gettimeofday=yes'
                      echo 'bc_cv_as_noexecstack=no'
                    ) >config.cache
                    CC="$UNIVERSAL_CC" \
                    CPPFLAGS="$UNIVERSAL_CPPFLAGS" \
                    CFLAGS="-O2 -g $UNIVERSAL_CFLAGS" \
                    LDFLAGS="$UNIVERSAL_LDFLAGS" \
                    ./configure $UNIVERSAL_TARGET \
                        --cache-file=./config.cache \
                        --without-cplusplus \
                        --without-java \
                        --without-python \
                        --with-cpu=none \
                        --with-arch=none \
                        --disable-threads \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   SQLite (uninstalled third-party library)
        if [ ! -d "$basemac/bin/$platform/sqlite-${v_sqlite}" ]; then
            echo "++ building third-party library sqlite-${v_sqlite}"
            (   cd $basemac/bin/$platform
                rm -rf sqlite-${v_sqlite}
                gzip -d -c ../../src/sqlite-${v_sqlite}.tar.gz | gnutar xf -
                (   cd sqlite-${v_sqlite}
                    patch -p0 <../../../src/sqlite-${v_sqlite}.patch
                    CC="$UNIVERSAL_CC" \
                    CPPFLAGS="$UNIVERSAL_CPPFLAGS" \
                    CFLAGS="-O2 -g -fno-common $UNIVERSAL_CFLAGS" \
                    LDFLAGS="$UNIVERSAL_LDFLAGS" \
                    ./configure $UNIVERSAL_TARGET \
                        --disable-utf8 \
                        --disable-readline \
                        --disable-threadsafe \
                        --disable-debug \
                        --disable-amalgamation \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   POPT (uninstalled third-party library)
        if [ ! -d "$basemac/bin/$platform/popt-${v_popt}" ]; then
            echo "++ building third-party library popt-${v_popt}"
            (   cd $basemac/bin/$platform
                rm -rf popt-${v_popt}
                gzip -d -c ../../src/popt-${v_popt}.tar.gz | gnutar xf -
                (   cd popt-${v_popt}
                    patch -p0 <../../../src/popt-${v_popt}.patch
                    CC="$UNIVERSAL_CC" \
                    CPPFLAGS="$UNIVERSAL_CPPFLAGS -DPOPT_fprintf=fprintf" \
                    CFLAGS="-O2 -g $UNIVERSAL_CFLAGS" \
                    LDFLAGS="$UNIVERSAL_LDFLAGS" \
                    ./configure $UNIVERSAL_TARGET \
                        --disable-dependency-tracking \
                        --disable-shared \
                        --with-included-gettext \
                        --without-libintl-prefix \
                        --without-libiconv-prefix \
                        --disable-nls
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   PCRE (uninstalled third-party library)
        if [ ! -d "$basemac/bin/$platform/pcre-${v_pcre}" ]; then
            echo "++ building third-party library pcre-${v_pcre}"
            (   cd $basemac/bin/$platform
                rm -rf pcre-${v_pcre}
                gzip -d -c ../../src/pcre-${v_pcre}.tar.gz | gnutar xf -
                (   cd pcre-${v_pcre}
                    patch -p0 <../../../src/pcre-${v_pcre}.patch
                    $SHTOOL subst \
                        -e '/LINENO: error: C[+]* preprocessor/{N;N;N;N;s/.*/:/;}' \
                        configure
                    CC="$UNIVERSAL_CC" \
                    CPPFLAGS="$UNIVERSAL_CPPFLAGS" \
                    CFLAGS="-O2 -g $UNIVERSAL_CFLAGS" \
                    LDFLAGS="$UNIVERSAL_LDFLAGS" \
                    GREP="grep" \
                    ./configure $UNIVERSAL_TARGET \
                        --disable-dependency-tracking \
                        --disable-cpp \
                        --disable-utf8 \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi

        #   OSSP uuid (uninstalled third-party library)
        if [ ! -d "$basemac/bin/$platform/uuid-${v_uuid}" ]; then
            echo "++ building third-party library uuid-${v_uuid}"
            (   cd $basemac/bin/$platform
                rm -rf uuid-${v_uuid}
                gzip -d -c ../../src/uuid-${v_uuid}.tar.gz | gnutar xf -
                (   cd uuid-${v_uuid}
                    $SHTOOL subst \
                        -e '/LINENO: error: C[+]* preprocessor/{N;N;N;N;s/.*/:/;}' \
                        configure
                    CC="$UNIVERSAL_CC" \
                    CPPFLAGS="$UNIVERSAL_CPPFLAGS" \
                    CFLAGS="-O2 -g $UNIVERSAL_CFLAGS" \
                    LDFLAGS="$UNIVERSAL_LDFLAGS" \
                    GREP="grep" \
                    ./configure $UNIVERSAL_TARGET \
                        --disable-shared
                    make
                ) || exit $?
            ) || exit $?
        fi
    }

    #   configure build environment
    configure () {
        echo "++ cleaning up build environment"
        ( cd ${DEVTOOL_SRCDIR}; make distclean || true ) >/dev/null 2>&1

        echo "++ configuring build environment"
        basemac="`cd $basemac && pwd`"
        CPP="$UNIVERSAL_CPP"
        CC="$UNIVERSAL_CC"
        CXX="$UNIVERSAL_CXX"
        CPPFLAGS="$UNIVERSAL_CPPFLAGS"
        CFLAGS="-O2 -g $UNIVERSAL_CFLAGS"
        CXXFLAGS="-O2 -g $UNIVERSAL_CFLAGS"
        LDFLAGS="$UNIVERSAL_LDFLAGS -Wl,-search_paths_first" # static
        LIBS="$LIBS -lssl -lcrypto" # shameless workaround for Neon
        LDFLAGS="$LDFLAGS -L`pwd`/xar/lib/.libs" # Xar linking hack
        LDFLAGS="$LDFLAGS -L`pwd`/xz/src/liblzma/.libs" # LZMA hack
        CPPFLAGS="$CPPFLAGS -I$basemac/bin/$platform/expat-${v_expat}/lib" # lua
        LDFLAGS="$LDFLAGS -L$basemac/bin/$platform/expat-${v_expat}/.libs" # lua
        export CPP
        export CC
        export CXX
        export CPPFLAGS
        export CFLAGS
        export CXXFLAGS
        export LDFLAGS
        export LIBS
        ${DEVTOOL_SRCDIR}/configure $UNIVERSAL_TARGET -v \
            --prefix=/usr/local \
            --sysconfdir=/private/etc \
            --localstatedir=/private/var/local \
            --mandir=/usr/local/share/man \
            --infodir=/usr/local/share/info \
            --disable-dependency-tracking \
            --disable-assembler \
            --program-prefix="" \
            --disable-aio \
            --with-glob \
            --enable-broken-chown \
            --with-dbapi=db \
            --with-bugreport="afb@rpm5.org" \
            --with-db=internal \
            --with-lua=internal \
            --with-syck=internal \
            --with-zlib=external \
            --with-bzip2=external \
            --with-file=internal \
            --with-xar=internal \
            --with-xz=internal \
            --with-neon="$basemac/bin/$platform/neon-${v_neon}" \
            --with-beecrypt="$basemac/bin/$platform/beecrypt-${v_beecrypt}" \
            --with-sqlite="$basemac/bin/$platform/sqlite-${v_sqlite}" \
            --with-popt="$basemac/bin/$platform/popt-${v_popt}" \
            --with-pcre="$basemac/bin/$platform/pcre-${v_pcre}" \
            --with-uuid="$basemac/bin/$platform/uuid-${v_uuid}" \
            --with-perl \
            --with-python \
            --with-apidocs=auto \
            --disable-static \
            --enable-shared \
            --disable-rpath \
            --disable-nls
    }

    #   do all at once
    prepare
    %checkout
    %autogen
    configure
    gnumake

    # build the internal txar tool, for testing purposes
    make -C tools txar || true

    # python complains about missing symbols from all over when using librpm*, relink:
    make -C misc LIBS="-lz -lxml2 -lpcre $LIBS" clean all
    make -C rpmio LIBS="-lpopt -lneon -lexpat -lbeecrypt -lxar -lbz2 $LIBS" clean all

    # install into a temporary destroot, instead of to system
    rm -rf /tmp/rpm-root
    mkdir -p /tmp/rpm-root/private/etc/rpm
    mkdir -p /tmp/rpm-root/private/var/local/tmp
    chmod 1777 /tmp/rpm-root/private/var/local/tmp
    ln -s private/etc /tmp/rpm-root/etc
    ln -s private/var /tmp/rpm-root/var
    gnumake install DESTDIR=/tmp/rpm-root
    rm /tmp/rpm-root/etc
    rm /tmp/rpm-root/var

    # remove generated/conflicting perl module files and lists
    rm /tmp/rpm-root/System/Library/Perl/*/darwin-thread-multi-2level/perllocal.pod
    rm /tmp/rpm-root/Library/Perl/*/darwin-thread-multi-2level/auto/RPM/.packlist
    
    # move perl/python modules to canonical /Library locations
    python_version=`python -c "import sys; print sys.version[:3]"`
    mkdir -p /tmp/rpm-root/Library/Python/$python_version
    mv /tmp/rpm-root/System/Library/Frameworks/Python.framework/Versions/* \
       /tmp/rpm-root/Library/Python/ 2>/dev/null
    mv /tmp/rpm-root/Library/Frameworks/Python.framework/Versions/* \
       /tmp/rpm-root/Library/Python/ 2>/dev/null
    rm -r /tmp/rpm-root/Library/Frameworks 2>/dev/null
    mv /tmp/rpm-root/Library/Python/*/lib/python*/site-packages \
       /tmp/rpm-root/Library/Python/*/ 2>/dev/null
    rm -r /tmp/rpm-root/Library/Python/*/lib 2>/dev/null
    mkdir -p /tmp/rpm-root/Library/Python/$python_version/site-packages/rpm
    mv /tmp/rpm-root/usr/local/lib/python*/site-packages/rpm/*.py \
       /tmp/rpm-root/Library/Python/*/site-packages/rpm 2>/dev/null
    rm -r /tmp/rpm-root/usr/local/lib/python* 2>/dev/null
    mv /tmp/rpm-root/usr/lib/python*/site-packages/rpm/* \
       /tmp/rpm-root/Library/Python/*/site-packages/rpm 2>/dev/null
    rm -r /tmp/rpm-root/usr/lib 2>/dev/null
    rm -r /tmp/rpm-root/System 2>/dev/null
    rm -r /tmp/rpm-root/Developer 2>/dev/null
    chmod 1775 /tmp/rpm-root/Library
    
    # setup default (undetected) configuration, for Mac OS X
    sed -i -e "s,${UNIVERSAL_CPP},gcc -E," /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e "s,${UNIVERSAL_CC},gcc," /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e "s,${UNIVERSAL_CXX},g++," /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e "s,/usr/bin/perl,perl," /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e "s,/usr/local/bin/perl,perl," /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e "s,/usr/bin/python,python," /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e "s,/usr/local/bin/python,python," /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e 's,%{_usr}/doc,%{_usr}/share/doc,' /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e 's,%{_prefix}/etc,/etc,' /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e 's,%{_prefix}/var,/var/local,' /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e 's,%{_prefix}/man,%{_prefix}/share/man,' /tmp/rpm-root/usr/local/lib/rpm/macros
    sed -i -e 's,%{_prefix}/info,%{_prefix}/share/info,' /tmp/rpm-root/usr/local/lib/rpm/macros
    rmdir /tmp/rpm-root/usr/local/src/rpm/RPMS/athlon
    rmdir /tmp/rpm-root/usr/local/src/rpm/RPMS/pentium3
    rmdir /tmp/rpm-root/usr/local/src/rpm/RPMS/pentium4
    rmdir /tmp/rpm-root/usr/local/src/rpm/RPMS/i486
    mkdir -p /tmp/rpm-root/usr/local/src/rpm/RPMS/i386
    mkdir -p /tmp/rpm-root/usr/local/src/rpm/RPMS/x86_64
    mkdir -p /tmp/rpm-root/usr/local/src/rpm/RPMS/ppc
    mkdir -p /tmp/rpm-root/usr/local/src/rpm/RPMS/ppc64
    mkdir -p /tmp/rpm-root/usr/local/src/rpm/RPMS/fat

    if [ ".$UNIVERSAL_SDK" != "." ]; then
    # setup CVOG platform
    cat <<__EOF__ >/tmp/rpm-root/private/etc/rpm/platform
i386-apple-darwin
fat-apple-darwin
noarch-apple-darwin
__EOF__
# TODO: when installing the Universal Binary PKG on PowerPC instead of Intel,
#       replace "i386-apple-darwin" with "ppc-apple-darwin" in the postflight.
#       also add extra line with "x86_64-apple-darwin" or "ppc64-apple-darwin"
#       first, if the installation machine is capable of using 64-bit binaries.
    
    # setup architectures
    for ARCH in ppc i386 ppc64 x86_64; do
    if [ "$ARCH" = "ppc64" -o "$ARCH" = "x86_64" ]; then BITS=-m64; else BITS=-m32; fi
    mkdir -p /tmp/rpm-root/usr/local/lib/rpm/$ARCH-darwin
    sed -e "s/^\\\\%/%/" <<__EOF__ >/tmp/rpm-root/usr/local/lib/rpm/$ARCH-darwin/macros
# Per-platform rpm configuration file.

#==============================================================================
# ---- per-platform macros.
#
\%_arch			$ARCH
\%_build_arch		$ARCH
\%_vendor		apple
\%_os			darwin
\%_gnu			%{nil}
\%_target_platform	%{_target_cpu}-%{_vendor}-%{_target_os}
\%optflags		-O2 $BITS

__EOF__
    done
    perl -pi -e "s/^\%_arch.*/\%_arch\t\t\tfat/g;s/^\%_build_arch.*/\%_build_arch\t\tfat/g" \
        /tmp/rpm-root/usr/local/lib/rpm/macros
    perl -pi -e "s/^(\%optflags)(\s+)(.*)/\$1\$2\$3 -arch i386 -arch ppc/g" \
        /tmp/rpm-root/usr/local/lib/rpm/macros
    fi

    # copy required popt.h library header to internal headers
    cp -p "$basemac/bin/$platform/popt-${v_popt}/popt.h" /tmp/rpm-root/usr/local/include/rpm

    # don't leak private search paths, libraries and arch'es
    perl -ni -e "print unless /^Libs.private/" /tmp/rpm-root/usr/local/lib/pkgconfig/rpm.pc

    # copy the internal txar tool over, for testing purposes
    cp -p tools/.libs/txar /tmp/rpm-root/usr/local/lib/rpm
    strip -S /tmp/rpm-root/usr/local/lib/rpm/txar

    # remove xar binaries
    rm -f /tmp/rpm-root/usr/local/bin/xar
    rm -f /tmp/rpm-root/usr/local/share/man/man1/xar.1
    rm -f /tmp/rpm-root/usr/local/include/xar/xar.h
    rmdir /tmp/rpm-root/usr/local/include/xar
    rm -f /tmp/rpm-root/usr/local/lib/libxar.1.dylib
    rm -f /tmp/rpm-root/usr/local/lib/libxar.dylib
    rm -f /tmp/rpm-root/usr/local/lib/libxar.a
    rm -f /tmp/rpm-root/usr/local/lib/libxar.la

    # remove xz binaries
    rm -f /tmp/rpm-root/usr/local/bin/*lz*
    rm -f /tmp/rpm-root/usr/local/bin/*xz*
    rm -f /tmp/rpm-root/usr/local/share/man/man1/*lz*.1
    rm -f /tmp/rpm-root/usr/local/share/man/man1/*xz*.1
    rm -f /tmp/rpm-root/usr/local/include/lzma.h
    rm -f -r /tmp/rpm-root/usr/local/include/lzma
    rm -f /tmp/rpm-root/usr/local/lib/liblzma.0.dylib
    rm -f /tmp/rpm-root/usr/local/lib/liblzma.1.dylib
    rm -f /tmp/rpm-root/usr/local/lib/liblzma.dylib
    rm -f /tmp/rpm-root/usr/local/lib/liblzma.a
    rm -f /tmp/rpm-root/usr/local/lib/liblzma.la
    rm -f /tmp/rpm-root/usr/local/lib/pkgconfig/lzma.pc
    rm -f /tmp/rpm-root/usr/local/lib/pkgconfig/liblzma.pc

    # strip debugging symbols, and remove libtool files (.la)
    strip -S /tmp/rpm-root/usr/local/bin/rpm*
    strip -S /tmp/rpm-root/usr/local/lib/rpm/rpmcmp
    strip -S /tmp/rpm-root/usr/local/lib/rpm/rpmdeps
    strip -S /tmp/rpm-root/usr/local/lib/rpm/db_*
    strip -S /tmp/rpm-root/usr/local/lib/librpm*.dylib
    chmod 755 /tmp/rpm-root/Library/Perl/*/darwin-thread-multi-2level/auto/RPM/RPM.bundle
    strip -S /tmp/rpm-root/Library/Perl/*/darwin-thread-multi-2level/auto/RPM/RPM.bundle
    chmod 555 /tmp/rpm-root/Library/Perl/*/darwin-thread-multi-2level/auto/RPM/RPM.bundle
    strip -S /tmp/rpm-root/Library/Python/*/site-packages/rpm/_rpmmodule.so
    rm -f /tmp/rpm-root/usr/local/lib/librpm*.la
    rm -f /tmp/rpm-root/Library/Python/*/site-packages/rpm/_rpmmodule.la
    
    # test drive (version only, should set up a local dbpath)
    DYLD_LIBRARY_PATH=/tmp/rpm-root/usr/local/lib:$DYLD_LIBRARY_PATH /tmp/rpm-root/usr/local/bin/rpm --version

%prepare
    %checkout
	%autogen
	%configure

%tarball
    %prepare
    make dist

%tarball.xz
    %prepare
	make dist-xz

