
REQUIREMENTS
============

Development-Time
----------------

--------------- --------- --------------- -------------------------------------
Component       Component Version Version Component
Name            Type      Minimum Used    URL
--------------- --------- ------- ------- -------------------------------------
Perl            mandatory 5.8.0   5.8.8   http://www.perl.com/
GNU m4          mandatory 1.4.0   1.4.9   http://www.gnu.org/software/m4/
GNU autoconf    mandatory 2.57    2.61    http://www.gnu.org/software/autoconf/
GNU automake    mandatory 1.8     1.10    http://www.gnu.org/software/automake/
GNU libtool     mandatory 1.5     1.5.24  http://www.gnu.org/software/libtool/
GNU gettext     mandatory 1.16    1.16.1  http://www.gnu.org/software/gettext/
--------------- --------- ------- ------- -------------------------------------

Build-Time
----------

--------------- --------- --------------- -------------------------------------
Component       Component Version Version Component
Name            Type      Minimum Used    URL
--------------- --------- ------- ------- -------------------------------------
ISO C Compiler  mandatory -       -       e.g. http://gcc.gnu.org/
POSIX make      mandatory -       -       e.g. http://www.gnu.org/software/make/
POPT            mandatory 1.9     1.11    http://rpm5.org/files/popt/
BeeCrypt        mandatory 4.0     4.1.2   http://www.virtualunlimited.com/products/beecrypt/
Neon            mandatory 0.26    0.26.3  http://www.webdav.org/neon/
File/magic      mandatory 4.0     4.21    ftp://ftp.astron.com/pub/file/
Berkeley-DB [1] mandatory -       4.5.20  http://www.oracle.com/database/berkeley-db.html
SQLite          optional  3.3     3.4.0   http://www.sqlite.org/
ZLib [2]        optional  1.2     1.2.3   http://www.zlib.net/
GNU bzip2       optional  1.0     1.0.4   http://www.bzip2.org/
Lua [3]         optional  -       5.0     http://www.lua.org/
GNU gettext     optional  1.16    1.16.1  http://www.gnu.org/software/gettext/
GNU iconv       optional  1.11    1.11    http://www.gnu.org/software/libiconv/
DMalloc         optional  5       5.5.2   http://dmalloc.com/
Electric Fence  optional  2.1     2.1.13  http://perens.com/FreeSoftware/ElectricFence/
Linux KeyUtils  optional  1.2     1.2     http://people.redhat.com/~dhowells/keyutils/
System libelf   optional  -       -       e.g. http://www.mr511.de/software/english.html
--------------- --------- ------- ------- -------------------------------------

[1] db:   modified copy bundled with RPM, stock external one not supported
[2] zlib: modified copy bundled with RPM, stock external one not recommended
[3] lua:  modified copy bundled with RPM, stock external one not supported

Run-Time
--------

--------------- --------- --------------- -------------------------------------
Component       Component Version Version Component
Name            Type      Minimum Used    URL
--------------- --------- ------- ------- -------------------------------------
GNU gzip        optional  -       -       http://www.gzip.org/
GNU bzip2       optional  -       -       http://www.bzip2.org/
GNU tar         optional  -       -       http://www.gnu.org/software/tar/
GNU cpio        optional  -       -       http://www.gnu.org/software/cpio/
GnuPG           optional  -       -       http://www.gnupg.org/
PGP2            optional  2.6.3   2.6.3   http://www.pgpi.org/
PGP6            optional  6.5.8   6.5.8   http://www.pgpi.org/
--------------- --------- ------- ------- -------------------------------------

PROCEDURE
=========

Development-Time
----------------

$ ./devtool checkout
$ ./devtool autogen
$ [make dist]

Build-Time
----------

$ ./configure --prefix=<prefix> [...]
$ make
$ make install [DESTDIR=...]

Run-Time
--------

$ <prefix>/bin/rpm --initdb
$ <prefix>/bin/rpm --rebuild foo.src.rpm
$ <prefix>/bin/rpm -Uvh /path/to/binary/package/foo.*.rpm
$ <prefix>/bin/rpm -qa
$ <prefix>/bin/rpm -e foo

Application Build-Time
----------------------

CPPFLAGS = `pkg-config rpm --cflags-only-I`
CFLAGS   = `pkg-config rpm --cflags-only-other`
LDFLAGS  = `pkg-config rpm --libs-only-other`
LIBS     = `pkg-config rpm --libs-only-l`

OS DEPENDENCIES
===============

Under Red Hat Linux all libraries (in fact all files distributed with
the OS) are under RPM control and this section is not an issue.

RPM will need to be informed of all the dependencies which were
satisfied before RPM was installed.  Typically this only refers to
libraries that are installed by the OS, but may include other
libraries and packages which are availible at the time RPM is
installed and will not under RPM control.  Another common example of
libraries which may need dependency provisions are precompiled
libraries which are installed by the OS package manager during system
build time.  The list of dependencies you will wish to load into RPM
will depend on exactly how you bootstrap RPM onto your system and what
parts of the sytem you put into packages as well as on the specific OS
you are using.

The script vpkg-provides.sh can be used to generate a package which
will satisfy the dependencies on your system.  To run it you will need
to create a specfile header for this empty package and run the progam
with:

    --spec_header '/path/to/os-base-header.spec

and if you wish to ensure that some directories are not traversed you
can use the option: 

    --ignore_dirs 'egrep|pattern|of|paths|to|ignore

By default the generated rpm will include a %verifyscript to verify
checksum of all files traversed has not changed.  This additional
check can be surpressed with:

    --no_verify

The result of running the script will be a specfile which will create
a package continging all the dependencies found on the system.  There
will be one provides line for each depednecy. The package will contain
none of the actual OS library files as it is assumed they are already
on your system and managed by other means.  Here is a example
(truncated) of the provides lines used by one user of Digital Unix. (I
have put several provides on the same line for brevity)

provides: /bin/sh /usr/bin/ksh /usr/bin/csh 
provides: libc.so.osf.1 libm.so.osf.1 libcurses.so.xpg4 libdb.so.osf.1
provides: libX11.so libXaw.so.6.0 libXext.so libXm.so.motif1.2 libXmu.so
provides: libdnet_stub.so.osf.1 libsecurity.so.osf.1 libpthread.so.osf.1
provides: libexc.so.osf.1 libmach.so.osf.1 libdps.so libdpstk.so 


The script vpkg-provides2.sh is underdevelopment as a more advanced
version of vpkg-provides.sh which is aware of many different unix
vendor packaging schemes.  It will create one "dependency package" for
each unix package your OS vendor installed.


rpmfilename:
-----------

If you plan on packaging for more then one OS you may want to edit
/etc/macros or /usr/lib/rpm/macros and change the line which has
rpmfilename to something which include both the %{_target_os} and
%{_target_cpu}.  This will cause the name of the generated rpm files
to the operating system name as well as the architecture which the rpm
runs under.  The line to change looks like:

%_rpmfilename           %%{ARCH}/%%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm

you may wish to include both the %{_target_os} and %{_target_cpu} in
the final base name, so that it's easier to distinguish between what
package is appropriate for a particular arch-os-version combo.  We
suggest:

%_rpmfilename           %%{_target_platform/%%{NAME}-%%{VERSION}-%%{RELEASE}.%%{_target_platform}.rpm

There is no %{_target_os_version} tag, so if you need to also
distinguish between RPMs for certain versions of the OS, you can
hard-code the version in the rpmrc on the build machine, so that .rpm
files are generated with the version as part of the filename.

For example when one user builds RPMs for Digital Unix 4.0b and 4.0d,
optimization is important and he will build one set of RPMs for the
EV4 processor and another set for the EV56 processor.  He specifies
both the OS version (if it's important, as it is for a few packages)
and the processor version by default by setting a special rpmfilename:
on the particular build machine.

The "rpmfilename: "tag on one machine (Digital Unix 4.0d, EV56 PWS 433)
looks like:

rpmfilename: %{_target_os}/4.0d/%{_target_cpu}/%{name}-%{version}-%{release}.%{_target_os}-%{_target_cpu}ev56.rpm

For package `foo-1.1', at build time that would translate into:

    osf1/4.0d/alpha/foo-1.1-1.osf1-alphaev56.rpm

The hyphen between the %{_target_cpu} and ev56 is left out for compatibility
with GNU Config.guess and because `alphaev56' looks more "normal" to
people with an alpha than alpha-ev56 for someone on an Intel Pentium
Pro would want `i586pro' over `i586-pro', but it does make parsing
this filename by other programs a bit more difficult.


GPG/PGP/PGP5
------------

To use the signing features of rpm, you will need to configure certain
rpm macros.

Here's what I use for gpg:

    /etc/rpm/macros for per-system (or ~/.rpmmacros for per-user) configuration
	%_signature     gpg
	%_gpg_name      Jeff Johnson (ARS N3NPQ) <jbj@redhat.com>
	%_gpg_path      /home/devel/jbj/.gnupg

Here's what I use for pgp2.6:

    /etc/rpm/macros for per-system (or ~/.rpmmacros for per-user) configuration
	%_signature	pgp
	%_pgpbin	/usr/bin/pgp
	%_pgp_name	Jeff Johnson <jbj@redhat.com>
	%_pgp_path	/home/jbj/.pgp

In order to use pgp5, you will need to change:

	%_signature	pgp5
	%_pgpbin	/path/to/pgp5/binary
	%_pgp_path	/path/to/pgp5/keyring

(Note: Only one of pgp and pgp5 may be used because of name conflicts.)

You may also need Red Hat GPG/PGP public keys. These can be found in the
rpm source tarball, in /usr/share/doc/rpm*, or from http://www.redhat.com. In
order to verify a package signed by Red Hat you will need to import these
keys onto you key ring. See the GPG/PGP documentation for how to do this.
