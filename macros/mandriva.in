%distribution		Mandriva Linux
%vendor			Mandriva
%bugurl			http://qa.mandriva.com
%disturl		http://mandriva.org

# This macro will disable the transaction lock on /var/lib/rpm/__db.*.
# This lock is of no use to us and will also result in errors when trying to
# install src.rpms as regular user.
%_rpmlock_path		%{nil}

%_upgrade_tag		name
%_obsolete_tag		name

# Disable automatic dependencies on parent directory and symlinks for now
%_check_symlink_deps	0
%_check_dirname_deps	0

# The directory where buildroots will be created.
%_buildrootdir          %{_topdir}/BUILDROOT

# Build root path, where %install installs the package during build.
%buildroot              %{_buildrootdir}/%{name}-%{version}-%{release}%{?disttag:-%{disttag}%{?distepoch:%{distepoch}}}.%{_target_cpu}-buildroot

# Path to top of build area.
%_topdir                %(echo $HOME)/rpmbuild

%_docdir_fmt		%%{NAME}

%_changelog_truncate	3 years ago

# This will die as soon as remaining usage has been phased out...
%mkrel(c:)		%{-c: 0.%{-c*}.}%{1}%{?subrel:.%subrel}
%manbo_mkrel()		%mkrel
%multiarch()		%{1}

# This will enable the use of distepoch and disttag in stead of polluting
# %release with such.
%evr_tuple_select	1234
%evr_tuple_order	EVRD
%disttag		%{!?distsuffix:mdv}%{?distsuffix}
%distepoch		%(sed -e 's#.*release\\ \\(\\S*\\).*#\\1#' /etc/release)

# Dynamic EVRD tags macro for use with versioned provides/requires in place of
# '%{version}-%{release}', ie. to automatically add distepoch or epoch if present
%EVRD			%{?epoch:%{epoch}:}%{?version:%{version}}%{?release:-%{release}}%{?distepoch::%{distepoch}}

%rename() \
Obsoletes: %{1} < %{EVRD} \
Provides: %{1} = %{EVRD}


%_default_patch_flags	-s -U
%_default_patch_fuzz	0

%apply_patches %{lua:\
f = io.open(rpm.expand("%{_specfile}"))\
if f then\
  for l in f:lines() do\
    match,b,num = string.find(string.lower(l), "^%s*patch(%d+)%s*:.*$")\
    if match then print(rpm.expand("%patch"..num.." -p1 -b "..string.format(".%04d~",num).." \\\n")); end\
  end\
  f:close()\
end\
}


%make			%{__make} %{_smp_mflags}
%makeinstall_std	make DESTDIR=%{?buildroot:%{buildroot}} install

# mdvbz#62322
%__grep			/bin/grep
%__gzip			/bin/gzip
%__lua			%{_bindir}/lua
%__rc			%{_bindir}/rc
%__xar			%{_bindir}/xar

# mdvbz#61851
%__tar_wildcards	--wildcards

%_loop_detection_loglevel 4


%_sysconfdir    /etc
%_defaultdocdir %{_datadir}/doc
%_localstatedir %{_var}
%_logdir 	%{_var}/log
%_libexecdir 	%{_libdir}

# mdvbz#62741
# standard systemd directories
%_systemdrootdir	/lib/systemd
%_systemunitdir		%{_systemdrootdir}/system
%_systemgeneratordir	%{_systemdrootdir}/system-generators
%_systemshutdowndir	%{_systemdrootdir}/system-shutdown

%_systemddatadir	%{_datadir}/systemd
%_userunitdir		%{_systemddatadir}/user

%_systemdlibexecdir	%{_libexecdir}/systemd
%_usergeneratordir	%{_systemdlibexecdir}/user-generators

%_systemdconfdir	%{_sysconfdir}/systemd

#
# multiarch is used to deal with situations where headers that contain
# ie. architecture specific parts to solve file conflicts between
# packages of different archs in multilib environments.
#
# Note: more details at http://wiki.mandriva.com/en/Policies/Multiarch
%multiarch_platform		multiarch-%{_arch}-%{_target_os}
%multiarch_bindir		%{_bindir}/%{multiarch_platform}
%multiarch_includedir		%{_includedir}/%{multiarch_platform}
%multiarch_binaries()		%{_rpmhome}/mkmultiarch binaries %{1}
%multiarch_includes()		%{_rpmhome}/mkmultiarch includes %{1}

# Check for need of multiarch, terminate build if needed and not used.
#
# Note: The default value should be 0 for legacy compatibility.
# TODO: fix check script and implement support for using
#%_multiarch_required_terminate_build	1

# use XZ to compress binary packages:
%_binary_payload w5.xzdio

%_enable_debug_packages 1


# Default extension to use (for info files)
%_extension .xz


%__install_info /sbin/install-info

%_install_info() if [[ -f %{_infodir}/%{1}%{_extension} ]]; then %{__install_info} %{_infodir}/%{1}%{_extension} --dir=%{_infodir}/dir; fi \
%{nil}
# (nb: keep the "alone on its line ';'")
%_remove_install_info() if [ "$1" = "0" ]; then if [[ -f %{_infodir}/%{1}%{_extension} ]]; then %{__install_info} %{_infodir}/%{1}%{_extension} --dir=%{_infodir}/dir --remove ; fi; fi \
%{nil}


# Macro: %{mklibname <name> [<major> [<minor>]] [-s] [-d]}
# - %{mklibname test}               => lib64test, on a lib64 platform
# - %{mklibname test 1 -d}      => libtest1-devel
# - %{mklibname test 1 -d 0 -s} => libtest1_0-static-devel
%mklibname(ds)  %{_lib}%{1}%{?2:%{2}}%{?3:_%{3}}%{-s:-static}%{-d:-devel}

%debugcflags %{?_enable_debug_packages:-g -frecord-gcc-switches -Wstrict-aliasing=2}

# common compilation flags

%_fortify_cflags -Wp,-D_FORTIFY_SOURCE=2

# cf http://wiki.mandriva.com/en/Development/Packaging/Problems#format_not_a_string_literal_and_no_format_arguments
%Werror_cflags -Wformat -Werror=format-security

%_ssp_cflags -fstack-protector --param=ssp-buffer-size=4%{?_serverbuild_flags: %_serverbuild_flags}
%__common_cflags -O2 %{debugcflags} -pipe %{Werror_cflags} %{?_fortify_cflags}
%__common_cflags_with_ssp %{__common_cflags} %{?_ssp_cflags}

# Servers opt flags.
# Also set the env variables for backward compatibility (#32050).
%serverbuild %define _serverbuild_flags -fstack-protector-all \
export CFLAGS="%optflags -fPIE"; export CXXFLAGS="%optflags -fPIE"; export RPM_OPT_FLAGS="%optflags -fPIE" \
%{nil}

# Hardened Servers opt flags.
%serverbuild_hardened %define _hardened_flags -Wl,-z,now -pie \
%serverbuild \
%{nil}

#==============================================================================
# ---- GPG/PGP/PGP5 signature macros.
#	Macro(s) to hold the arguments passed to GPG/PGP for package
#	signing and verification.
#

# We disable the gpg key automatic querying 
%_hkp_keyserver_query   %nil


#	Verify digest/signature flags for various rpm modes:
#	0x30300 (_RPMVSF_NODIGESTS)    --nohdrchk      if set, don't check digest(s)
#	0xc0c00 (_RPMVSF_NOSIGNATURES) --nosignature   if set, don't check signature(s)
#	0xf0000 (_RPMVSF_NOPAYLOAD)    --nolegacy      if set, check header+payload (if possible)
#	0x00f00 (_RPMVSF_NOHEADER)     --nohdrchk      if set, don't check rpmdb headers
%_vsflags_query		0xc0c00


#	Open all indices before doing chroot(2).
#
%_openall_before_chroot	1

%_repackage_all_erasures	0

# activate filetriggers (cf http://wiki.mandriva.com/en/Rpm_filetriggers)
%_filetriggers_dir /var/lib/rpm/filetriggers

%{load:/etc/rpm/macros.d/*.macros}
