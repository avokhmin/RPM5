#! /bin/sh

# trb - temporary wrapper script for .libs/trb
# Generated by ltmain.sh - GNU libtool 1.5.26 (1.1220.2.493 2008/02/01 16:58:18)
#
# The trb program cannot be directly executed until all the libtool
# libraries that it depends on are installed.
#
# This wrapper script should never be moved out of the build directory.
# If it is, it will not operate correctly.

# Sed substitution that helps us do robust quoting.  It backslashifies
# metacharacters that are still active within double-quoted strings.
Xsed='/bin/sed -e 1s/^X//'
sed_quote_subst='s/\([\\`\\"$\\\\]\)/\\\1/g'

# Be Bourne compatible (taken from Autoconf:_AS_BOURNE_COMPATIBLE).
if test -n "${ZSH_VERSION+set}" && (emulate sh) >/dev/null 2>&1; then
  emulate sh
  NULLCMD=:
  # Zsh 3.x and 4.x performs word splitting on ${1+"$@"}, which
  # is contrary to our usage.  Disable this feature.
  alias -g '${1+"$@"}'='"$@"'
  setopt NO_GLOB_SUBST
else
  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac
fi
BIN_SH=xpg4; export BIN_SH # for Tru64
DUALCASE=1; export DUALCASE # for MKS sh

# The HP-UX ksh and POSIX shell print the target directory to stdout
# if CDPATH is set.
(unset CDPATH) >/dev/null 2>&1 && unset CDPATH

relink_command="(cd /X/src/wdj/ruby; { test -z \"\${LIBRARY_PATH+set}\" || unset LIBRARY_PATH || { LIBRARY_PATH=; export LIBRARY_PATH; }; }; { test -z \"\${COMPILER_PATH+set}\" || unset COMPILER_PATH || { COMPILER_PATH=; export COMPILER_PATH; }; }; { test -z \"\${GCC_EXEC_PREFIX+set}\" || unset GCC_EXEC_PREFIX || { GCC_EXEC_PREFIX=; export GCC_EXEC_PREFIX; }; }; { test -z \"\${LD_RUN_PATH+set}\" || unset LD_RUN_PATH || { LD_RUN_PATH=; export LD_RUN_PATH; }; }; { test -z \"\${LD_LIBRARY_PATH+set}\" || unset LD_LIBRARY_PATH || { LD_LIBRARY_PATH=; export LD_LIBRARY_PATH; }; }; PATH=\"/sbin:/usr/sbin:/usr/lib/qt-3.3/bin:/usr/kerberos/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/jbj/bin\"; export PATH; gcc -g -O2 -fPIC -DPIC -Wall -W -Wpointer-arith -Wstrict-prototypes -Wmissing-prototypes -Wno-char-subscripts -Wno-missing-field-initializers -Wno-unused-parameter -Wformat-security -O0 -g3 -D_GNU_SOURCE -D_REENTRANT -D_LARGEFILE64_SOURCE -DNE_LFS -o \$progdir/\$file trb.o  -L/usr/kerberos/lib -L/usr/lib/perl5/5.10.0/i386-linux-thread-multi/CORE -L/usr/lib/ruby/1.8/i386-linux ./.libs/rpmrbm.so /X/src/wdj/build/.libs/librpmbuild.so -L/X/src/wdj/db3 -L/X/src/wdj/file/src -L/X/src/wdj/file -L/X/src/wdj/js/src -L/X/src/wdj/js -L/X/src/wdj/lua -L/X/src/wdj/pcre -L/X/src/wdj/syck/lib -L/X/src/wdj/syck -L/X/src/wdj/xar/lib -L/X/src/wdj/xar -L/X/src/wdj/xz/src/liblzma -L/X/src/wdj/xz /X/src/wdj/lib/.libs/librpm.so ../lib/.libs/librpm.so /X/src/wdj/rpmdb/.libs/librpmdb.so ../rpmdb/.libs/librpmdb.so /X/src/wdj/rpmio/.libs/librpmio.so /X/src/wdj/misc/.libs/librpmmisc.so ../rpmio/.libs/librpmio.so ../misc/.libs/librpmmisc.so /X/src/wdj/js/src/.libs/libjs.so -lexpat -lacl -lxml2 -lkeyutils -luuid -lossp-uuid -lm -lficl -ltcl -lruby -lpython2.5 -lperl -lsqlite3 -lbeecrypt -lbz2 -lpopt -lrt -lelf -lselinux -lgcrypt -lgpg-error -lssl3 -lsmime3 -lnss3 -lnssutil3 -lplds4 -lplc4 -lnspr4 -lpthread -lssl -lcrypto -ldl -lz /usr/lib/libneon.so  -Wl,--rpath -Wl,/X/src/wdj/ruby/.libs -Wl,--rpath -Wl,/X/src/wdj/build/.libs -Wl,--rpath -Wl,/X/src/wdj/lib/.libs -Wl,--rpath -Wl,/X/src/wdj/rpmdb/.libs -Wl,--rpath -Wl,/X/src/wdj/rpmio/.libs -Wl,--rpath -Wl,/X/src/wdj/misc/.libs -Wl,--rpath -Wl,/X/src/wdj/js/src/.libs -Wl,--rpath -Wl,/usr/lib/rpm/lib ) "

# This environment variable determines our operation mode.
if test "$libtool_install_magic" = "%%%MAGIC variable%%%"; then
  # install mode needs the following variable:
  notinst_deplibs=' rpmrbm.la /X/src/wdj/build/librpmbuild.la /X/src/wdj/lib/librpm.la ../lib/librpm.la /X/src/wdj/rpmdb/librpmdb.la ../rpmdb/librpmdb.la /X/src/wdj/rpmio/librpmio.la /X/src/wdj/misc/librpmmisc.la ../rpmio/librpmio.la ../misc/librpmmisc.la /X/src/wdj/js/src/libjs.la'
else
  # When we are sourced in execute mode, $file and $echo are already set.
  if test "$libtool_execute_magic" != "%%%MAGIC variable%%%"; then
    echo="echo"
    file="$0"
    # Make sure echo works.
    if test "X$1" = X--no-reexec; then
      # Discard the --no-reexec flag, and continue.
      shift
    elif test "X`($echo '\t') 2>/dev/null`" = 'X\t'; then
      # Yippee, $echo works!
      :
    else
      # Restart under the correct shell, and then maybe $echo will work.
      exec /bin/sh "$0" --no-reexec ${1+"$@"}
    fi
  fi

  # Find the directory that this script lives in.
  thisdir=`$echo "X$file" | $Xsed -e 's%/[^/]*$%%'`
  test "x$thisdir" = "x$file" && thisdir=.

  # Follow symbolic links until we get to the real thisdir.
  file=`ls -ld "$file" | /bin/sed -n 's/.*-> //p'`
  while test -n "$file"; do
    destdir=`$echo "X$file" | $Xsed -e 's%/[^/]*$%%'`

    # If there was a directory component, then change thisdir.
    if test "x$destdir" != "x$file"; then
      case "$destdir" in
      [\\/]* | [A-Za-z]:[\\/]*) thisdir="$destdir" ;;
      *) thisdir="$thisdir/$destdir" ;;
      esac
    fi

    file=`$echo "X$file" | $Xsed -e 's%^.*/%%'`
    file=`ls -ld "$thisdir/$file" | /bin/sed -n 's/.*-> //p'`
  done

  # Try to get the absolute directory name.
  absdir=`cd "$thisdir" && pwd`
  test -n "$absdir" && thisdir="$absdir"

  program=lt-'trb'
  progdir="$thisdir/.libs"

  if test ! -f "$progdir/$program" || \
     { file=`ls -1dt "$progdir/$program" "$progdir/../$program" 2>/dev/null | /bin/sed 1q`; \
       test "X$file" != "X$progdir/$program"; }; then

    file="$$-$program"

    if test ! -d "$progdir"; then
      mkdir "$progdir"
    else
      rm -f "$progdir/$file"
    fi

    # relink executable if necessary
    if test -n "$relink_command"; then
      if relink_command_output=`eval $relink_command 2>&1`; then :
      else
	echo "$relink_command_output" >&2
	rm -f "$progdir/$file"
	exit 1
      fi
    fi

    mv -f "$progdir/$file" "$progdir/$program" 2>/dev/null ||
    { rm -f "$progdir/$program";
      mv -f "$progdir/$file" "$progdir/$program"; }
    rm -f "$progdir/$file"
  fi

  if test -f "$progdir/$program"; then
    if test "$libtool_execute_magic" != "%%%MAGIC variable%%%"; then
      # Run the actual program with our arguments.

      exec "$progdir/$program" ${1+"$@"}

      $echo "$0: cannot exec $program $*"
      exit 1
    fi
  else
    # The program doesn't exist.
    $echo "$0: error: \`$progdir/$program' does not exist" 1>&2
    $echo "This script is just a wrapper for $program." 1>&2
    echo "See the libtool documentation for more information." 1>&2
    exit 1
  fi
fi
