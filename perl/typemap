TYPEMAP
rpmdb			    O_OBJECT_rpmdb
rpmdbMatchIterator	O_OBJECT_rpmmi
Header              O_OBJECT_header
rpmts	    		O_OBJECT_rpmts
rpmprobFilterFlags	T_IV
rpmElementType		T_IV

INPUT
O_OBJECT_rpmdb
    if (sv_isobject($arg) && (SvTYPE(SvRV($arg)) == SVt_PVMG))
        $var = ($type)SvIV((SV*)SvRV( $arg ));
    else {
        warn( \"${Package}::$func_name() -- $var is not a blessed SV reference\" );
        XSRETURN_UNDEF;
    }

O_OBJECT_rpmmi
    if (sv_isobject($arg) && (SvTYPE(SvRV($arg)) == SVt_PVMG))
        $var = ($type)SvIV((SV*)SvRV( $arg ));
    else {
        warn( \"${Package}::$func_name() -- $var is not a blessed SV reference\" );
        XSRETURN_UNDEF;
    }

O_OBJECT_header
    if (sv_isobject($arg) && (SvTYPE(SvRV($arg)) == SVt_PVMG))
        $var = ($type)SvIV((SV*)SvRV( $arg ));
    else {
        warn( \"${Package}::$func_name() -- $var is not a blessed SV reference\" );
        XSRETURN_UNDEF;
    }

O_OBJECT_rpmts
    if (sv_isobject($arg) && (SvTYPE(SvRV($arg)) == SVt_PVMG))
        $var = ($type)SvIV((SV*)SvRV( $arg ));
    else {
        warn( \"${Package}::$func_name() -- $var is not a blessed SV reference\" );
        XSRETURN_UNDEF;
    }

OUTPUT
O_OBJECT_rpmdb
        sv_setref_pv( $arg, "RPM::C::DB", (void*)$var );
O_OBJECT_rpmmi
        sv_setref_pv( $arg, "RPM::PackageIterator", (void*)$var );
O_OBJECT_header
        sv_setref_pv( $arg, "RPM::Header", (void*)$var );
O_OBJECT_rpmts
        sv_setref_pv( $arg, "RPM::Transaction", (void*)$var );
